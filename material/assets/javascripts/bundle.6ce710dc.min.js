(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		1: 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([62,0]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "t", function() { return /* reexport */ watchDocument; });
__webpack_require__.d(__webpack_exports__, "d", function() { return /* reexport */ getElement; });
__webpack_require__.d(__webpack_exports__, "f", function() { return /* reexport */ getElementOrThrow; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ getActiveElement; });
__webpack_require__.d(__webpack_exports__, "h", function() { return /* reexport */ getElements; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ createElement; });
__webpack_require__.d(__webpack_exports__, "j", function() { return /* reexport */ replaceElement; });
__webpack_require__.d(__webpack_exports__, "n", function() { return /* reexport */ setElementFocus; });
__webpack_require__.d(__webpack_exports__, "u", function() { return /* reexport */ watchElementFocus; });
__webpack_require__.d(__webpack_exports__, "w", function() { return /* reexport */ watchElementThreshold; });
__webpack_require__.d(__webpack_exports__, "o", function() { return /* reexport */ setElementSelection; });
__webpack_require__.d(__webpack_exports__, "g", function() { return /* reexport */ getElementSize; });
__webpack_require__.d(__webpack_exports__, "e", function() { return /* reexport */ getElementContentSize; });
__webpack_require__.d(__webpack_exports__, "v", function() { return /* reexport */ watchElementSize; });
__webpack_require__.d(__webpack_exports__, "x", function() { return /* reexport */ watchKeyboard; });
__webpack_require__.d(__webpack_exports__, "i", function() { return /* reexport */ getLocation; });
__webpack_require__.d(__webpack_exports__, "p", function() { return /* reexport */ setLocation; });
__webpack_require__.d(__webpack_exports__, "y", function() { return /* reexport */ watchLocation; });
__webpack_require__.d(__webpack_exports__, "q", function() { return /* reexport */ setLocationHash; });
__webpack_require__.d(__webpack_exports__, "z", function() { return /* reexport */ watchLocationTarget; });
__webpack_require__.d(__webpack_exports__, "A", function() { return /* reexport */ watchMedia; });
__webpack_require__.d(__webpack_exports__, "B", function() { return /* reexport */ watchPrint; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ at; });
__webpack_require__.d(__webpack_exports__, "k", function() { return /* reexport */ request; });
__webpack_require__.d(__webpack_exports__, "l", function() { return /* reexport */ requestJSON; });
__webpack_require__.d(__webpack_exports__, "m", function() { return /* reexport */ requestXML; });
__webpack_require__.d(__webpack_exports__, "r", function() { return /* reexport */ setToggle; });
__webpack_require__.d(__webpack_exports__, "C", function() { return /* reexport */ watchToggle; });
__webpack_require__.d(__webpack_exports__, "D", function() { return /* reexport */ watchViewport; });
__webpack_require__.d(__webpack_exports__, "E", function() { return /* reexport */ watchViewportAt; });
__webpack_require__.d(__webpack_exports__, "s", function() { return /* reexport */ setViewportOffset; });
__webpack_require__.d(__webpack_exports__, "F", function() { return /* reexport */ watchWorker; });

// UNUSED EXPORTS: getElementOffset, watchElementOffset, getLocationHash, watchLocationHash, getToggle, getViewportOffset, watchViewportOffset, getViewportSize, watchViewportSize

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/ReplaySubject.js
var ReplaySubject = __webpack_require__(48);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js
var fromEvent = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mapTo.js
var mapTo = __webpack_require__(49);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/document/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch document
 *
 * Documents must be implemented as subjects, so all downstream observables are
 * automatically updated when a new document is emitted. This enabled features
 * like instant loading.
 *
 * @returns Document subject
 */
function watchDocument() {
    const document$ = new ReplaySubject["a" /* ReplaySubject */]();
    Object(fromEvent["a" /* fromEvent */])(document, "DOMContentLoaded")
        .pipe(Object(mapTo["a" /* mapTo */])(document))
        .subscribe(document$);
    /* Return document */
    return document$;
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/element/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
function getElement(selector, node = document) {
    return node.querySelector(selector) || undefined;
}
function getElementOrThrow(selector, node = document) {
    const el = getElement(selector, node);
    if (typeof el === "undefined")
        throw new ReferenceError(`Missing element: expected "${selector}" to be present`);
    return el;
}
/**
 * Retrieve the currently active element
 *
 * @returns Element or nothing
 */
function getActiveElement() {
    return document.activeElement instanceof HTMLElement
        ? document.activeElement
        : undefined;
}
function getElements(selector, node = document) {
    return Array.from(node.querySelectorAll(selector));
}
/* ------------------------------------------------------------------------- */
/**
 * Create an element
 *
 * @template T - Tag name type
 *
 * @param tagName - Tag name
 *
 * @returns Element
 */
function createElement(tagName) {
    return document.createElement(tagName);
}
/**
 * Replace an element with another element
 *
 * @param source - Source element
 * @param target - Target element
 */
function replaceElement(source, target) {
    source.replaceWith(target);
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/merge.js
var merge = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(38);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/startWith.js
var startWith = __webpack_require__(66);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/element/focus/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set element focus
 *
 * @param el - Element
 * @param value - Whether the element should be focused
 */
function setElementFocus(el, value = true) {
    if (value)
        el.focus();
    else
        el.blur();
}
/* ------------------------------------------------------------------------- */
/**
 * Watch element focus
 *
 * @param el - Element
 *
 * @returns Element focus observable
 */
function watchElementFocus(el) {
    return Object(merge["a" /* merge */])(Object(fromEvent["a" /* fromEvent */])(el, "focus"), Object(fromEvent["a" /* fromEvent */])(el, "blur"))
        .pipe(Object(map["a" /* map */])(({ type }) => type === "focus"), Object(startWith["a" /* startWith */])(el === getActiveElement()));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(52);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Subject.js + 1 modules
var Subject = __webpack_require__(28);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/defer.js
var defer = __webpack_require__(67);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/of.js
var of = __webpack_require__(68);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/never.js
var never = __webpack_require__(69);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var switchMap = __webpack_require__(45);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/finalize.js
var finalize = __webpack_require__(70);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(71);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/tap.js
var tap = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/filter.js
var filter = __webpack_require__(51);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/element/size/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Data
 * ------------------------------------------------------------------------- */
/**
 * Resize observer entry subject
 */
const entry$ = new Subject["a" /* Subject */]();
/**
 * Resize observer observable
 *
 * This observable will create a `ResizeObserver` on the first subscription
 * and will automatically terminate it when there are no more subscribers.
 * It's quite important to centralize observation in a single `ResizeObserver`,
 * as the performance difference can be quite dramatic, as the link shows.
 *
 * @see https://bit.ly/3iIYfEm - Google Groups on performance
 */
const observer$ = Object(defer["a" /* defer */])(() => Object(of["a" /* of */])(new ResizeObserver(entries => {
    for (const entry of entries)
        entry$.next(entry);
})))
    .pipe(Object(switchMap["a" /* switchMap */])(resize => never["a" /* NEVER */].pipe(Object(startWith["a" /* startWith */])(resize))
    .pipe(Object(finalize["a" /* finalize */])(() => resize.disconnect()))), Object(shareReplay["a" /* shareReplay */])(1));
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve element size
 *
 * @param el - Element
 *
 * @returns Element size
 */
function getElementSize(el) {
    return {
        width: el.offsetWidth,
        height: el.offsetHeight
    };
}
/**
 * Retrieve element content size, i.e. including overflowing content
 *
 * @param el - Element
 *
 * @returns Element size
 */
function getElementContentSize(el) {
    return {
        width: el.scrollWidth,
        height: el.scrollHeight
    };
}
/* ------------------------------------------------------------------------- */
/**
 * Watch element size
 *
 * This function returns an observable that subscribes to a single internal
 * instance of `ResizeObserver` upon subscription, and emit resize events until
 * termination. Note that this function should not be called with the same
 * element twice, as the first unsubscription will terminate observation.
 *
 * @param el - Element
 *
 * @returns Element size observable
 */
function watchElementSize(el) {
    return observer$
        .pipe(Object(tap["a" /* tap */])(observer => observer.observe(el)), Object(switchMap["a" /* switchMap */])(observer => entry$
        .pipe(Object(filter["a" /* filter */])(({ target }) => target === el), Object(finalize["a" /* finalize */])(() => observer.unobserve(el)), Object(map["a" /* map */])(({ contentRect }) => ({
        width: contentRect.width,
        height: contentRect.height
    })))), Object(startWith["a" /* startWith */])(getElementSize(el)));
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/element/offset/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve element offset
 *
 * @param el - Element
 *
 * @returns Element offset
 */
function getElementOffset(el) {
    return {
        x: el.scrollLeft,
        y: el.scrollTop
    };
}
/* ------------------------------------------------------------------------- */
/**
 * Watch element offset
 *
 * @param el - Element
 *
 * @returns Element offset observable
 */
function watchElementOffset(el) {
    return Object(merge["a" /* merge */])(Object(fromEvent["a" /* fromEvent */])(el, "scroll"), Object(fromEvent["a" /* fromEvent */])(window, "resize"))
        .pipe(Object(map["a" /* map */])(() => getElementOffset(el)), Object(startWith["a" /* startWith */])(getElementOffset(el)));
}
/**
 * Watch element threshold
 *
 * This function returns an observable which emits whether the bottom scroll
 * offset of an elements is within a certain threshold.
 *
 * @param el - Element
 * @param threshold - Threshold
 *
 * @returns Element threshold observable
 */
function watchElementThreshold(el, threshold = 16) {
    return watchElementOffset(el)
        .pipe(Object(map["a" /* map */])(({ y }) => {
        const visible = getElementSize(el);
        const content = getElementContentSize(el);
        return y >= (content.height - visible.height - threshold);
    }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])());
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/element/selection/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set element text selection
 *
 * @param el - Element
 */
function setElementSelection(el) {
    if (el instanceof HTMLInputElement)
        el.select();
    else
        throw new Error("Not implemented");
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/element/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */






// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/share.js
var share = __webpack_require__(50);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/toggle/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Data
 * ------------------------------------------------------------------------- */
/**
 * Toggle map
 */
const toggles = {
    drawer: getElementOrThrow("[data-md-toggle=drawer]"),
    search: getElementOrThrow("[data-md-toggle=search]")
};
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve the value of a toggle
 *
 * @param name - Toggle
 *
 * @returns Toggle value
 */
function getToggle(name) {
    return toggles[name].checked;
}
/**
 * Set toggle
 *
 * Simulating a click event seems to be the most cross-browser compatible way
 * of changing the value while also emitting a `change` event. Before, Material
 * used `CustomEvent` to programmatically change the value of a toggle, but this
 * is a much simpler and cleaner solution which doesn't require a polyfill.
 *
 * @param name - Toggle
 * @param value - Toggle value
 */
function setToggle(name, value) {
    if (toggles[name].checked !== value)
        toggles[name].click();
}
/* ------------------------------------------------------------------------- */
/**
 * Watch toggle
 *
 * @param name - Toggle
 *
 * @returns Toggle value observable
 */
function watchToggle(name) {
    const el = toggles[name];
    return Object(fromEvent["a" /* fromEvent */])(el, "change")
        .pipe(Object(map["a" /* map */])(() => el.checked), Object(startWith["a" /* startWith */])(el.checked));
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/keyboard/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Check whether an element may receive keyboard input
 *
 * @param el - Element
 *
 * @returns Test result
 */
function isSusceptibleToKeyboard(el) {
    switch (el.tagName) {
        /* Form elements */
        case "INPUT":
        case "SELECT":
        case "TEXTAREA":
            return true;
        /* Everything else */
        default:
            return el.isContentEditable;
    }
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch keyboard
 *
 * @returns Keyboard observable
 */
function watchKeyboard() {
    return Object(fromEvent["a" /* fromEvent */])(window, "keydown")
        .pipe(Object(filter["a" /* filter */])(ev => !(ev.metaKey || ev.ctrlKey)), Object(map["a" /* map */])(ev => ({
        mode: getToggle("search") ? "search" : "global",
        type: ev.key,
        claim() {
            ev.preventDefault();
            ev.stopPropagation();
        }
    })), Object(filter["a" /* filter */])(({ mode }) => {
        if (mode === "global") {
            const active = getActiveElement();
            if (typeof active !== "undefined")
                return !isSusceptibleToKeyboard(active);
        }
        return true;
    }), Object(share["a" /* share */])());
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject = __webpack_require__(73);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/location/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve location
 *
 * This function will return a `URL` object (and not `Location`) in order to
 * normalize typings across the application. Furthermore, locations need to be
 * tracked without setting them and `Location` is a singleton which represents
 * the current location.
 *
 * @returns URL
 */
function getLocation() {
    return new URL(location.href);
}
/**
 * Set location
 *
 * @param url - URL to change to
 */
function setLocation(url) {
    location.href = url.href;
}
/* ------------------------------------------------------------------------- */
/**
 * Watch location
 *
 * @returns Location subject
 */
function watchLocation() {
    return new BehaviorSubject["a" /* BehaviorSubject */](getLocation());
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/location/hash/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve location hash
 *
 * @returns Location hash
 */
function getLocationHash() {
    return location.hash.substring(1);
}
/**
 * Set location hash
 *
 * Setting a new fragment identifier via `location.hash` will have no effect
 * if the value doesn't change. When a new fragment identifier is set, we want
 * the browser to target the respective element at all times, which is why we
 * use this dirty little trick.
 *
 * @param hash - Location hash
 */
function setLocationHash(hash) {
    const el = createElement("a");
    el.href = hash;
    el.addEventListener("click", ev => ev.stopPropagation());
    el.click();
}
/* ------------------------------------------------------------------------- */
/**
 * Watch location hash
 *
 * @returns Location hash observable
 */
function watchLocationHash() {
    return Object(fromEvent["a" /* fromEvent */])(window, "hashchange")
        .pipe(Object(map["a" /* map */])(getLocationHash), Object(startWith["a" /* startWith */])(getLocationHash()), Object(filter["a" /* filter */])(hash => hash.length > 0), Object(share["a" /* share */])());
}
/**
 * Watch location target
 *
 * @returns Location target observable
 */
function watchLocationTarget() {
    return watchLocationHash()
        .pipe(Object(switchMap["a" /* switchMap */])(id => Object(of["a" /* of */])(getElement(`[id="${id}"]`))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/location/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/browser/media/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch media query
 *
 * @param query - Media query
 *
 * @returns Media observable
 */
function watchMedia(query) {
    const media = matchMedia(query);
    return Object(fromEvent["a" /* fromEvent */])(media, "change")
        .pipe(Object(map["a" /* map */])(ev => ev.matches), Object(startWith["a" /* startWith */])(media.matches));
}
/**
 * Watch print mode, cross-browser
 *
 * @returns Print observable
 */
function watchPrint() {
    return Object(merge["a" /* merge */])(watchMedia("print").pipe(Object(filter["a" /* filter */])(Boolean)), /* Webkit */ Object(fromEvent["a" /* fromEvent */])(window, "beforeprint") /* IE, FF */)
        .pipe(Object(mapTo["a" /* mapTo */])(undefined));
}
/* ------------------------------------------------------------------------- */
/**
 * Toggle an observable with a media observable
 *
 * @template T - Data type
 *
 * @param query$ - Media observable
 * @param factory - Observable factory
 *
 * @returns Toggled observable
 */
function at(query$, factory) {
    return query$
        .pipe(Object(switchMap["a" /* switchMap */])(active => active ? factory() : never["a" /* NEVER */]));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/from.js + 12 modules
var from = __webpack_require__(10);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/request/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Fetch the given URL
 *
 * @param url - Request URL
 * @param options - Request options
 *
 * @returns Response observable
 */
function request(url, options = { credentials: "same-origin" }) {
    return Object(from["a" /* from */])(fetch(url, options))
        .pipe(Object(filter["a" /* filter */])(res => res.status === 200));
}
/**
 * Fetch JSON from the given URL
 *
 * @template T - Data type
 *
 * @param url - Request URL
 * @param options - Request options
 *
 * @returns Data observable
 */
function requestJSON(url, options) {
    return request(url, options)
        .pipe(Object(switchMap["a" /* switchMap */])(res => res.json()), Object(shareReplay["a" /* shareReplay */])(1));
}
/**
 * Fetch XML from the given URL
 *
 * @param url - Request URL
 * @param options - Request options
 *
 * @returns Data observable
 */
function requestXML(url, options) {
    const dom = new DOMParser();
    return request(url, options)
        .pipe(Object(switchMap["a" /* switchMap */])(res => res.text()), Object(map["a" /* map */])(res => dom.parseFromString(res, "text/xml")), Object(shareReplay["a" /* shareReplay */])(1));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/combineLatest.js + 1 modules
var combineLatest = __webpack_require__(54);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilKeyChanged.js
var distinctUntilKeyChanged = __webpack_require__(74);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/viewport/offset/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve viewport offset
 *
 * On iOS Safari, viewport offset can be negative due to overflow scrolling.
 * As this may induce strange behaviors downstream, we'll just limit it to 0.
 *
 * @returns Viewport offset
 */
function getViewportOffset() {
    return {
        x: Math.max(0, pageXOffset),
        y: Math.max(0, pageYOffset)
    };
}
/**
 * Set viewport offset
 *
 * @param offset - Viewport offset
 */
function setViewportOffset({ x, y }) {
    window.scrollTo(x || 0, y || 0);
}
/* ------------------------------------------------------------------------- */
/**
 * Watch viewport offset
 *
 * @returns Viewport offset observable
 */
function watchViewportOffset() {
    return Object(merge["a" /* merge */])(Object(fromEvent["a" /* fromEvent */])(window, "scroll", { passive: true }), Object(fromEvent["a" /* fromEvent */])(window, "resize", { passive: true }))
        .pipe(Object(map["a" /* map */])(getViewportOffset), Object(startWith["a" /* startWith */])(getViewportOffset()));
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/viewport/size/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve viewport size
 *
 * @returns Viewport size
 */
function getViewportSize() {
    return {
        width: innerWidth,
        height: innerHeight
    };
}
/* ------------------------------------------------------------------------- */
/**
 * Watch viewport size
 *
 * @returns Viewport size observable
 */
function watchViewportSize() {
    return Object(fromEvent["a" /* fromEvent */])(window, "resize", { passive: true })
        .pipe(Object(map["a" /* map */])(getViewportSize), Object(startWith["a" /* startWith */])(getViewportSize()));
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/viewport/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch viewport
 *
 * @returns Viewport observable
 */
function watchViewport() {
    return Object(combineLatest["a" /* combineLatest */])([
        watchViewportOffset(),
        watchViewportSize()
    ])
        .pipe(Object(map["a" /* map */])(([offset, size]) => ({ offset, size })), Object(shareReplay["a" /* shareReplay */])(1));
}
/**
 * Watch viewport relative to element
 *
 * @param el - Element
 * @param options - Options
 *
 * @returns Viewport observable
 */
function watchViewportAt(el, { viewport$, header$ }) {
    const size$ = viewport$
        .pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("size"));
    /* Compute element offset */
    const offset$ = Object(combineLatest["a" /* combineLatest */])([size$, header$])
        .pipe(Object(map["a" /* map */])(() => ({
        x: el.offsetLeft,
        y: el.offsetTop
    })));
    /* Compute relative viewport, return hot observable */
    return Object(combineLatest["a" /* combineLatest */])([header$, viewport$, offset$])
        .pipe(Object(map["a" /* map */])(([{ height }, { offset, size }, { x, y }]) => ({
        offset: {
            x: offset.x - x,
            y: offset.y - y + height
        },
        size
    })));
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/viewport/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/throttle.js
var throttle = __webpack_require__(75);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMapTo.js
var switchMapTo = __webpack_require__(76);

// CONCATENATED MODULE: ./src/assets/javascripts/browser/worker/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch a web worker
 *
 * This function returns an observable that sends all values emitted by the
 * message observable to the web worker. Web worker communication is expected
 * to be bidirectional (request-response) and synchronous. Messages that are
 * emitted during a pending request are throttled, the last one is emitted.
 *
 * @param worker - Web worker
 * @param options - Options
 *
 * @returns Worker message observable
 */
function watchWorker(worker, { tx$ }) {
    /* Intercept messages from worker-like objects */
    const rx$ = Object(fromEvent["a" /* fromEvent */])(worker, "message")
        .pipe(Object(map["a" /* map */])(({ data }) => data));
    /* Send and receive messages, return hot observable */
    return tx$
        .pipe(Object(throttle["a" /* throttle */])(() => rx$, { leading: true, trailing: true }), Object(tap["a" /* tap */])(message => worker.postMessage(message)), Object(switchMapTo["a" /* switchMapTo */])(rx$), Object(share["a" /* share */])());
}

// CONCATENATED MODULE: ./src/assets/javascripts/browser/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */











/***/ }),

/***/ 6:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "r", function() { return /* reexport */ setFocusable; });
__webpack_require__.d(__webpack_exports__, "e", function() { return /* reexport */ resetFocusable; });
__webpack_require__.d(__webpack_exports__, "o", function() { return /* reexport */ setAnchorState; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ resetAnchorState; });
__webpack_require__.d(__webpack_exports__, "n", function() { return /* reexport */ setAnchorActive; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ resetAnchorActive; });
__webpack_require__.d(__webpack_exports__, "p", function() { return /* reexport */ setDialogMessage; });
__webpack_require__.d(__webpack_exports__, "q", function() { return /* reexport */ setDialogState; });
__webpack_require__.d(__webpack_exports__, "d", function() { return /* reexport */ resetDialogState; });
__webpack_require__.d(__webpack_exports__, "s", function() { return /* reexport */ setHeaderState; });
__webpack_require__.d(__webpack_exports__, "f", function() { return /* reexport */ resetHeaderState; });
__webpack_require__.d(__webpack_exports__, "t", function() { return /* reexport */ setHeaderTitleState; });
__webpack_require__.d(__webpack_exports__, "g", function() { return /* reexport */ resetHeaderTitleState; });
__webpack_require__.d(__webpack_exports__, "u", function() { return /* reexport */ setSearchQueryPlaceholder; });
__webpack_require__.d(__webpack_exports__, "h", function() { return /* reexport */ resetSearchQueryPlaceholder; });
__webpack_require__.d(__webpack_exports__, "v", function() { return /* reexport */ setSearchResultMeta; });
__webpack_require__.d(__webpack_exports__, "j", function() { return /* reexport */ resetSearchResultMeta; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ addToSearchResultList; });
__webpack_require__.d(__webpack_exports__, "i", function() { return /* reexport */ resetSearchResultList; });
__webpack_require__.d(__webpack_exports__, "x", function() { return /* reexport */ setSidebarOffset; });
__webpack_require__.d(__webpack_exports__, "l", function() { return /* reexport */ resetSidebarOffset; });
__webpack_require__.d(__webpack_exports__, "w", function() { return /* reexport */ setSidebarHeight; });
__webpack_require__.d(__webpack_exports__, "k", function() { return /* reexport */ resetSidebarHeight; });
__webpack_require__.d(__webpack_exports__, "y", function() { return /* reexport */ setSourceFacts; });
__webpack_require__.d(__webpack_exports__, "z", function() { return /* reexport */ setSourceState; });
__webpack_require__.d(__webpack_exports__, "A", function() { return /* reexport */ setTabsState; });
__webpack_require__.d(__webpack_exports__, "m", function() { return /* reexport */ resetTabsState; });

// UNUSED EXPORTS: setScrollLock, resetScrollLock

// CONCATENATED MODULE: ./src/assets/javascripts/actions/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set focusable property
 *
 * @param el - Element
 * @param value - Tabindex value
 */
function setFocusable(el, value = 0) {
    el.setAttribute("tabindex", value.toString());
}
/**
 * Reset focusable property
 *
 * @param el - Element
 */
function resetFocusable(el) {
    el.removeAttribute("tabindex");
}
/**
 * Set scroll lock
 *
 * @param el - Scrollable element
 * @param value - Vertical offset
 */
function setScrollLock(el, value) {
    el.setAttribute("data-md-state", "lock");
    el.style.top = `-${value}px`;
}
/**
 * Reset scroll lock
 *
 * @param el - Scrollable element
 */
function resetScrollLock(el) {
    const value = -1 * parseInt(el.style.top, 10);
    el.removeAttribute("data-md-state");
    el.style.top = "";
    if (value)
        window.scrollTo(0, value);
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/anchor/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set anchor state
 *
 * @param el - Anchor element
 * @param state - Anchor state
 */
function setAnchorState(el, state) {
    el.setAttribute("data-md-state", state);
}
/**
 * Reset anchor state
 *
 * @param el - Anchor element
 */
function resetAnchorState(el) {
    el.removeAttribute("data-md-state");
}
/* ------------------------------------------------------------------------- */
/**
 * Set anchor active
 *
 * @param el - Anchor element
 * @param value - Whether the anchor is active
 */
function setAnchorActive(el, value) {
    el.classList.toggle("md-nav__link--active", value);
}
/**
 * Reset anchor active
 *
 * @param el - Anchor element
 */
function resetAnchorActive(el) {
    el.classList.remove("md-nav__link--active");
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/dialog/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set dialog message
 *
 * @param el - Dialog element
 * @param value - Dialog message
 */
function setDialogMessage(el, value) {
    el.firstElementChild.innerHTML = value;
}
/* ------------------------------------------------------------------------- */
/**
 * Set dialog state
 *
 * @param el - Dialog element
 * @param state - Dialog state
 */
function setDialogState(el, state) {
    el.setAttribute("data-md-state", state);
}
/**
 * Reset dialog state
 *
 * @param el - Dialog element
 */
function resetDialogState(el) {
    el.removeAttribute("data-md-state");
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/header/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set header state
 *
 * @param el - Header element
 * @param state - Header state
 */
function setHeaderState(el, state) {
    el.setAttribute("data-md-state", state);
}
/**
 * Reset header state
 *
 * @param el - Header element
 */
function resetHeaderState(el) {
    el.removeAttribute("data-md-state");
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/header/title/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set header title state
 *
 * @param el - Header title element
 * @param state - Header title state
 */
function setHeaderTitleState(el, state) {
    el.setAttribute("data-md-state", state);
}
/**
 * Reset header title state
 *
 * @param el - Header title element
 */
function resetHeaderTitleState(el) {
    el.removeAttribute("data-md-state");
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/header/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// EXTERNAL MODULE: ./src/assets/javascripts/_/index.ts
var _ = __webpack_require__(7);

// CONCATENATED MODULE: ./src/assets/javascripts/actions/search/query/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set search query placeholder
 *
 * @param el - Search query element
 * @param value - Placeholder
 */
function setSearchQueryPlaceholder(el, value) {
    el.placeholder = value;
}
/**
 * Reset search query placeholder
 *
 * @param el - Search query element
 */
function resetSearchQueryPlaceholder(el) {
    el.placeholder = Object(_["c" /* translation */])("search.placeholder");
}

// EXTERNAL MODULE: ./src/assets/javascripts/utilities/index.ts + 2 modules
var utilities = __webpack_require__(8);

// CONCATENATED MODULE: ./src/assets/javascripts/actions/search/result/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set number of search results
 *
 * @param el - Search result metadata element
 * @param value - Number of results
 */
function setSearchResultMeta(el, value) {
    switch (value) {
        /* No results */
        case 0:
            el.textContent = Object(_["c" /* translation */])("search.result.none");
            break;
        /* One result */
        case 1:
            el.textContent = Object(_["c" /* translation */])("search.result.one");
            break;
        /* Multiple result */
        default:
            el.textContent = Object(_["c" /* translation */])("search.result.other", Object(utilities["c" /* round */])(value));
    }
}
/**
 * Reset number of search results
 *
 * @param el - Search result metadata element
 */
function resetSearchResultMeta(el) {
    el.textContent = Object(_["c" /* translation */])("search.result.placeholder");
}
/* ------------------------------------------------------------------------- */
/**
 * Add an element to the search result list
 *
 * @param el - Search result list element
 * @param child - Search result element
 */
function addToSearchResultList(el, child) {
    el.appendChild(child);
}
/**
 * Reset search result list
 *
 * @param el - Search result list element
 */
function resetSearchResultList(el) {
    el.innerHTML = "";
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/search/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/actions/sidebar/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set sidebar offset
 *
 * @param el - Sidebar element
 * @param value - Sidebar offset
 */
function setSidebarOffset(el, value) {
    el.style.top = `${value}px`;
}
/**
 * Reset sidebar offset
 *
 * @param el - Sidebar element
 */
function resetSidebarOffset(el) {
    el.style.top = "";
}
/* ------------------------------------------------------------------------- */
/**
 * Set sidebar height
 *
 * This function doesn't set the height of the actual sidebar, but of its first
 * child – the `.md-sidebar__scrollwrap` element in order to mitigiate jittery
 * sidebars when the footer is scrolled into view. At some point we switched
 * from `absolute` / `fixed` positioning to `sticky` positioning, significantly
 * reducing jitter in some browsers (respectively Firefox and Safari) when
 * scrolling from the top. However, top-aligned sticky positioning means that
 * the sidebar snaps to the bottom when the end of the container is reached.
 * This is what leads to the mentioned jitter, as the sidebar's height may be
 * updated too slowly.
 *
 * This behaviour can be mitigiated by setting the height of the sidebar to `0`
 * while preserving the padding, and the height on its first element.
 *
 * @param el - Sidebar element
 * @param value - Sidebar height
 */
function setSidebarHeight(el, value) {
    const scrollwrap = el.firstElementChild;
    scrollwrap.style.height = `${value - 2 * scrollwrap.offsetTop}px`;
}
/**
 * Reset sidebar height
 *
 * @param el - Sidebar element
 */
function resetSidebarHeight(el) {
    const scrollwrap = el.firstElementChild;
    scrollwrap.style.height = "";
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/source/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set repository facts
 *
 * @param el - Repository element
 * @param child - Repository facts element
 */
function setSourceFacts(el, child) {
    el.lastElementChild.appendChild(child);
}
/**
 * Set repository state
 *
 * @param el - Repository element
 * @param state - Repository state
 */
function setSourceState(el, state) {
    el.lastElementChild.setAttribute("data-md-state", state);
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/tabs/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set tabs state
 *
 * @param el - Tabs element
 * @param state - Tabs state
 */
function setTabsState(el, state) {
    el.setAttribute("data-md-state", state);
}
/**
 * Reset tabs state
 *
 * @param el - Tabs element
 */
function resetTabsState(el) {
    el.removeAttribute("data-md-state");
}

// CONCATENATED MODULE: ./src/assets/javascripts/actions/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */










/***/ }),

/***/ 62:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "document$", function() { return /* binding */ javascripts_document$; });
__webpack_require__.d(__webpack_exports__, "location$", function() { return /* binding */ javascripts_location$; });
__webpack_require__.d(__webpack_exports__, "target$", function() { return /* binding */ javascripts_target$; });
__webpack_require__.d(__webpack_exports__, "keyboard$", function() { return /* binding */ javascripts_keyboard$; });
__webpack_require__.d(__webpack_exports__, "viewport$", function() { return /* binding */ javascripts_viewport$; });
__webpack_require__.d(__webpack_exports__, "tablet$", function() { return /* binding */ tablet$; });
__webpack_require__.d(__webpack_exports__, "screen$", function() { return /* binding */ screen$; });
__webpack_require__.d(__webpack_exports__, "print$", function() { return /* binding */ javascripts_print$; });
__webpack_require__.d(__webpack_exports__, "component$", function() { return /* binding */ component$; });

// EXTERNAL MODULE: ./node_modules/focus-visible/dist/focus-visible.js
var focus_visible = __webpack_require__(55);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Subject.js + 1 modules
var Subject = __webpack_require__(28);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/merge.js
var merge = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/defer.js
var defer = __webpack_require__(67);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/filter.js
var filter = __webpack_require__(51);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(38);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var switchMap = __webpack_require__(45);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(71);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mergeWith.js
var mergeWith = __webpack_require__(78);

// EXTERNAL MODULE: ./src/assets/javascripts/_/index.ts
var _ = __webpack_require__(7);

// EXTERNAL MODULE: ./src/assets/javascripts/browser/index.ts + 19 modules
var browser = __webpack_require__(0);

// CONCATENATED MODULE: ./src/assets/javascripts/components/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve the element for a given component or throw a reference error
 *
 * @template T - Element type
 *
 * @param type - Component type
 * @param node - Node of reference
 *
 * @returns Element
 */
function getComponentElement(type, node = document) {
    return Object(browser["f" /* getElementOrThrow */])(`[data-md-component=${type}]`, node);
}
/**
 * Retrieve all elements for a given component
 *
 * @template T - Element type
 *
 * @param type - Component type
 * @param node - Node of reference
 *
 * @returns Elements
 */
function getComponentElements(type, node = document) {
    return Object(browser["h" /* getElements */])(`[data-md-component=${type}]`, node);
}

// EXTERNAL MODULE: ./node_modules/clipboard/dist/clipboard.js
var clipboard = __webpack_require__(30);
var clipboard_default = /*#__PURE__*/__webpack_require__.n(clipboard);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/of.js
var of = __webpack_require__(68);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js
var fromEvent = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/never.js
var never = __webpack_require__(69);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/share.js
var share = __webpack_require__(50);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilKeyChanged.js
var distinctUntilKeyChanged = __webpack_require__(74);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/withLatestFrom.js
var withLatestFrom = __webpack_require__(77);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/tap.js
var tap = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/finalize.js
var finalize = __webpack_require__(70);

// EXTERNAL MODULE: ./src/assets/javascripts/actions/index.ts + 12 modules
var actions = __webpack_require__(6);

// EXTERNAL MODULE: ./src/assets/javascripts/utilities/index.ts + 2 modules
var utilities = __webpack_require__(8);

// CONCATENATED MODULE: ./src/assets/javascripts/templates/clipboard/index.tsx
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Render a 'copy-to-clipboard' button
 *
 * @param id - Unique identifier
 *
 * @returns Element
 */
function renderClipboardButton(id) {
    return (Object(utilities["a" /* h */])("button", { class: "md-clipboard md-icon", title: Object(_["c" /* translation */])("clipboard.copy"), "data-clipboard-target": `#${id} > code` }));
}

// CONCATENATED MODULE: ./src/assets/javascripts/templates/search/index.tsx
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Helper types
 * ------------------------------------------------------------------------- */
/**
 * Render flag
 */
var Flag;
(function (Flag) {
    Flag[Flag["TEASER"] = 1] = "TEASER";
    Flag[Flag["PARENT"] = 2] = "PARENT"; /* Render as parent */
})(Flag || (Flag = {}));
/* ----------------------------------------------------------------------------
 * Helper function
 * ------------------------------------------------------------------------- */
/**
 * Render a search document
 *
 * @param document - Search document
 * @param flag - Render flags
 *
 * @returns Element
 */
function renderSearchDocument(document, flag) {
    const parent = flag & Flag.PARENT;
    const teaser = flag & Flag.TEASER;
    /* Render missing query terms */
    const missing = Object.keys(document.terms)
        .filter(key => !document.terms[key])
        .map(key => [Object(utilities["a" /* h */])("del", null, key), " "])
        .flat()
        .slice(0, -1);
    /* Render article or section, depending on flags */
    const url = document.location;
    return (Object(utilities["a" /* h */])("a", { href: url, class: "md-search-result__link", tabIndex: -1 },
        Object(utilities["a" /* h */])("article", { class: ["md-search-result__article", ...parent
                    ? ["md-search-result__article--document"]
                    : []
            ].join(" "), "data-md-score": document.score.toFixed(2) },
            parent > 0 && Object(utilities["a" /* h */])("div", { class: "md-search-result__icon md-icon" }),
            Object(utilities["a" /* h */])("h1", { class: "md-search-result__title" }, document.title),
            teaser > 0 && document.text.length > 0 &&
                Object(utilities["a" /* h */])("p", { class: "md-search-result__teaser" }, Object(utilities["d" /* truncate */])(document.text, 320)),
            teaser > 0 && missing.length > 0 &&
                Object(utilities["a" /* h */])("p", { class: "md-search-result__terms" },
                    Object(_["c" /* translation */])("search.result.term.missing"),
                    ": ",
                    missing))));
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Render a search result
 *
 * @param result - Search result
 *
 * @returns Element
 */
function renderSearchResult(result) {
    const threshold = result[0].score;
    const docs = [...result];
    /* Find and extract parent article */
    const parent = docs.findIndex(doc => !doc.location.includes("#"));
    const [article] = docs.splice(parent, 1);
    /* Determine last index above threshold */
    let index = docs.findIndex(doc => doc.score < threshold);
    if (index === -1)
        index = docs.length;
    /* Partition sections */
    const best = docs.slice(0, index);
    const more = docs.slice(index);
    /* Render children */
    const children = [
        renderSearchDocument(article, Flag.PARENT | +(!parent && index === 0)),
        ...best.map(section => renderSearchDocument(section, Flag.TEASER)),
        ...more.length ? [
            Object(utilities["a" /* h */])("details", { class: "md-search-result__more" },
                Object(utilities["a" /* h */])("summary", { tabIndex: -1 }, more.length > 0 && more.length === 1
                    ? Object(_["c" /* translation */])("search.result.more.one")
                    : Object(_["c" /* translation */])("search.result.more.other", more.length)),
                more.map(section => renderSearchDocument(section, Flag.TEASER)))
        ] : []
    ];
    /* Render search result */
    return (Object(utilities["a" /* h */])("li", { class: "md-search-result__item" }, children));
}

// CONCATENATED MODULE: ./src/assets/javascripts/templates/source/index.tsx
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Render repository facts
 *
 * @param facts - Repository facts
 *
 * @returns Element
 */
function renderSourceFacts(facts) {
    return (Object(utilities["a" /* h */])("ul", { class: "md-source__facts" }, facts.map(fact => (Object(utilities["a" /* h */])("li", { class: "md-source__fact" }, fact)))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/templates/table/index.tsx
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Render a table inside a wrapper to improve scrolling on mobile
 *
 * @param table - Table element
 *
 * @returns Element
 */
function renderTable(table) {
    return (Object(utilities["a" /* h */])("div", { class: "md-typeset__scrollwrap" },
        Object(utilities["a" /* h */])("div", { class: "md-typeset__table" }, table)));
}

// CONCATENATED MODULE: ./src/assets/javascripts/templates/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */





// CONCATENATED MODULE: ./src/assets/javascripts/components/content/code/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */






/* ----------------------------------------------------------------------------
 * Data
 * ------------------------------------------------------------------------- */
/**
 * Global index for Clipboard.js integration
 */
let code_index = 0;
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch code block
 *
 * This function will monitor size changes of the viewport, as well as switches
 * of content tabs with embedded code blocks, as both may trigger overflow.
 *
 * @param el - Code block element
 * @param options - Options
 *
 * @returns Code block observable
 */
function watchCodeBlock(el, { viewport$ }) {
    const container$ = Object(of["a" /* of */])(el)
        .pipe(Object(switchMap["a" /* switchMap */])(child => {
        const container = child.closest("[data-tabs]");
        if (container instanceof HTMLElement) {
            return Object(merge["a" /* merge */])(...Object(browser["h" /* getElements */])("input", container)
                .map(input => Object(fromEvent["a" /* fromEvent */])(input, "change")));
        }
        return never["a" /* NEVER */];
    }), Object(share["a" /* share */])());
    /* Check overflow on resize and tab change */
    return Object(merge["a" /* merge */])(viewport$.pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("size")), container$)
        .pipe(Object(map["a" /* map */])(() => {
        const visible = Object(browser["g" /* getElementSize */])(el);
        const content = Object(browser["e" /* getElementContentSize */])(el);
        return {
            scroll: content.width > visible.width
        };
    }), Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("scroll"));
}
/**
 * Mount code block
 *
 * This function ensures that an overflowing code block is focusable through
 * keyboard, so it can be scrolled without a mouse to improve on accessibility.
 *
 * @param el - Code block element
 * @param options - Options
 *
 * @returns Code block component observable
 */
function mountCodeBlock(el, options) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(withLatestFrom["a" /* withLatestFrom */])(Object(browser["A" /* watchMedia */])("(hover)")))
        .subscribe(([{ scroll }, hover]) => {
        if (scroll && hover)
            Object(actions["r" /* setFocusable */])(el);
        else
            Object(actions["e" /* resetFocusable */])(el);
    });
    /* Inject button for Clipboard.js integration */
    if (clipboard_default.a.isSupported()) {
        const parent = el.closest("pre");
        parent.id = `__code_${code_index++}`;
        parent.insertBefore(renderClipboardButton(parent.id), el);
    }
    /* Create and return component */
    return watchCodeBlock(el, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mapTo.js
var mapTo = __webpack_require__(49);

// CONCATENATED MODULE: ./src/assets/javascripts/components/content/details/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch details
 *
 * @param el - Details element
 * @param options - Options
 *
 * @returns Details observable
 */
function watchDetails(el, { target$, print$ }) {
    return target$
        .pipe(Object(map["a" /* map */])(target => target.closest("details:not([open])")), Object(filter["a" /* filter */])(details => el === details), Object(mergeWith["a" /* mergeWith */])(print$), Object(mapTo["a" /* mapTo */])(el));
}
/**
 * Mount details
 *
 * This function ensures that `details` tags are opened on anchor jumps and
 * prior to printing, so the whole content of the page is visible.
 *
 * @param el - Details element
 * @param options - Options
 *
 * @returns Details component observable
 */
function mountDetails(el, options) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$.subscribe(() => {
        el.setAttribute("open", "");
        el.scrollIntoView();
    });
    /* Create and return component */
    return watchDetails(el, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(mapTo["a" /* mapTo */])({ ref: el }));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/content/table/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Data
 * ------------------------------------------------------------------------- */
/**
 * Sentinel for replacement
 */
const sentinel = Object(browser["b" /* createElement */])("table");
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Mount data table
 *
 * This function wraps a data table in another scrollable container, so they
 * can be scrolled on smaller screen sizes and won't break the layout.
 *
 * @param el - Data table element
 *
 * @returns Data table component observable
 */
function mountDataTable(el) {
    Object(browser["j" /* replaceElement */])(el, sentinel);
    Object(browser["j" /* replaceElement */])(sentinel, renderTable(el));
    /* Create and return component */
    return Object(of["a" /* of */])({ ref: el });
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/content/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */





/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Mount content
 *
 * This function mounts all components that are found in the content of the
 * actual article, including code blocks, data tables and details.
 *
 * @param el - Content element
 * @param options - Options
 *
 * @returns Content component observable
 */
function mountContent(el, { target$, viewport$, print$ }) {
    return Object(merge["a" /* merge */])(
    /* Code blocks */
    ...Object(browser["h" /* getElements */])("pre > code", el)
        .map(child => mountCodeBlock(child, { viewport$ })), 
    /* Data tables */
    ...Object(browser["h" /* getElements */])("table:not([class])", el)
        .map(child => mountDataTable(child)), 
    /* Details */
    ...Object(browser["h" /* getElements */])("details", el)
        .map(child => mountDetails(child, { target$, print$ })));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/content/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js + 3 modules
var animationFrame = __webpack_require__(90);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/delay.js + 2 modules
var delay = __webpack_require__(91);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/observeOn.js
var observeOn = __webpack_require__(79);

// CONCATENATED MODULE: ./src/assets/javascripts/components/dialog/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch dialog
 *
 * @param _el - Dialog element
 * @param options - Options
 *
 * @returns Dialog observable
 */
function watchDialog(_el, { alert$ }) {
    return alert$
        .pipe(Object(switchMap["a" /* switchMap */])(message => Object(merge["a" /* merge */])(Object(of["a" /* of */])(true), Object(of["a" /* of */])(false).pipe(Object(delay["a" /* delay */])(2000)))
        .pipe(Object(map["a" /* map */])(open => ({ message, open })))));
}
/**
 * Mount dialog
 *
 * This function makes the dialog in the right corner appear when a new alert
 * is emitted through the subject that is passed as part of the options.
 *
 * @param el - Dialog element
 * @param options - Options
 *
 * @returns Dialog component observable
 */
function mountDialog(el, options) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]))
        .subscribe(({ message, open }) => {
        Object(actions["p" /* setDialogMessage */])(el, message);
        if (open)
            Object(actions["q" /* setDialogState */])(el, "open");
        else
            Object(actions["d" /* resetDialogState */])(el);
    });
    /* Create and return component */
    return watchDialog(el, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/combineLatest.js + 1 modules
var combineLatest = __webpack_require__(54);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/bufferCount.js
var bufferCount = __webpack_require__(80);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(52);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/startWith.js
var startWith = __webpack_require__(66);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/combineLatestWith.js
var combineLatestWith = __webpack_require__(81);

// CONCATENATED MODULE: ./src/assets/javascripts/components/header/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */





/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Compute whether the header is hidden
 *
 * If the user scrolls past a certain threshold, the header can be hidden when
 * scrolling down, and shown when scrolling up.
 *
 * @param options - Options
 *
 * @returns Toggle observable
 */
function isHidden({ viewport$ }) {
    if (!Object(_["b" /* feature */])("header.autohide"))
        return Object(of["a" /* of */])(false);
    /* Compute direction and turning point */
    const direction$ = viewport$
        .pipe(Object(map["a" /* map */])(({ offset: { y } }) => y), Object(bufferCount["a" /* bufferCount */])(2, 1), Object(map["a" /* map */])(([a, b]) => [a < b, b]), Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])(0));
    /* Compute whether header should be hidden */
    const hidden$ = Object(combineLatest["a" /* combineLatest */])([viewport$, direction$])
        .pipe(Object(filter["a" /* filter */])(([{ offset }, [, y]]) => Math.abs(y - offset.y) > 100), Object(map["a" /* map */])(([, [direction]]) => direction), Object(distinctUntilChanged["a" /* distinctUntilChanged */])());
    /* Compute threshold for autohiding */
    const search$ = Object(browser["C" /* watchToggle */])("search");
    return Object(combineLatest["a" /* combineLatest */])([viewport$, search$])
        .pipe(Object(map["a" /* map */])(([{ offset }, search]) => offset.y > 400 && !search), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(switchMap["a" /* switchMap */])(active => active ? hidden$ : Object(of["a" /* of */])(false)), Object(startWith["a" /* startWith */])(false));
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch header
 *
 * @param el - Header element
 * @param options - Options
 *
 * @returns Header observable
 */
function watchHeader(el, options) {
    return Object(defer["a" /* defer */])(() => {
        const styles = getComputedStyle(el);
        return Object(of["a" /* of */])(styles.position === "sticky" ||
            styles.position === "-webkit-sticky");
    })
        .pipe(Object(combineLatestWith["a" /* combineLatestWith */])(Object(browser["v" /* watchElementSize */])(el), isHidden(options)), Object(map["a" /* map */])(([sticky, { height }, hidden]) => ({
        height: sticky ? height : 0,
        sticky,
        hidden
    })), Object(distinctUntilChanged["a" /* distinctUntilChanged */])((a, b) => (a.sticky === b.sticky &&
        a.height === b.height &&
        a.hidden === b.hidden)), Object(shareReplay["a" /* shareReplay */])(1));
}
/**
 * Mount header
 *
 * This function manages the different states of the header, i.e. whether it's
 * hidden or rendered with a shadow. This depends heavily on the main area.
 *
 * @param el - Header element
 * @param options - Options
 *
 * @returns Header component observable
 */
function mountHeader(el, { header$, main$ }) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("active"), Object(combineLatestWith["a" /* combineLatestWith */])(header$), Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]))
        .subscribe(([{ active }, { hidden }]) => {
        if (active)
            Object(actions["s" /* setHeaderState */])(el, hidden ? "hidden" : "shadow");
        else
            Object(actions["f" /* resetHeaderState */])(el);
    });
    /* Connect to long-living subject and return component */
    main$.subscribe(main => internal$.next(main));
    return header$
        .pipe(Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/header/title/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch header title
 *
 * @param el - Heading element
 * @param options - Options
 *
 * @returns Header title observable
 */
function watchHeaderTitle(el, { viewport$, header$ }) {
    return Object(browser["E" /* watchViewportAt */])(el, { header$, viewport$ })
        .pipe(Object(map["a" /* map */])(({ offset: { y } }) => {
        const { height } = Object(browser["g" /* getElementSize */])(el);
        return {
            active: y >= height
        };
    }), Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("active"));
}
/**
 * Mount header title
 *
 * This function swaps the header title from the site title to the title of the
 * current page when the user scrolls past the first headline.
 *
 * @param el - Header title element
 * @param options - Options
 *
 * @returns Header title component observable
 */
function mountHeaderTitle(el, options) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]))
        .subscribe(({ active }) => {
        if (active)
            Object(actions["t" /* setHeaderTitleState */])(el, "active");
        else
            Object(actions["g" /* resetHeaderTitleState */])(el);
    });
    /* Obtain headline, if any */
    const headline = Object(browser["d" /* getElement */])("article h1");
    if (typeof headline === "undefined")
        return never["a" /* NEVER */];
    /* Create and return component */
    return watchHeaderTitle(headline, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/header/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/components/main/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch main area
 *
 * This function returns an observable that computes the visual parameters of
 * the main area which depends on the viewport vertical offset and height, as
 * well as the height of the header element, if the header is fixed.
 *
 * @param el - Main area element
 * @param options - Options
 *
 * @returns Main area observable
 */
function watchMain(el, { viewport$, header$ }) {
    /* Compute necessary adjustment for header */
    const adjust$ = header$
        .pipe(Object(map["a" /* map */])(({ height }) => height), Object(distinctUntilChanged["a" /* distinctUntilChanged */])());
    /* Compute the main area's top and bottom borders */
    const border$ = adjust$
        .pipe(Object(switchMap["a" /* switchMap */])(() => Object(browser["v" /* watchElementSize */])(el)
        .pipe(Object(map["a" /* map */])(({ height }) => ({
        top: el.offsetTop,
        bottom: el.offsetTop + height
    })), Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("bottom"))));
    /* Compute the main area's offset, visible height and if we scrolled past */
    return Object(combineLatest["a" /* combineLatest */])([adjust$, border$, viewport$])
        .pipe(Object(map["a" /* map */])(([header, { top, bottom }, { offset: { y }, size: { height } }]) => {
        height = Math.max(0, height
            - Math.max(0, top - y, header)
            - Math.max(0, height + y - bottom));
        return {
            offset: top - header,
            height,
            active: top - header <= y
        };
    }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])((a, b) => (a.offset === b.offset &&
        a.height === b.height &&
        a.active === b.active)));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/sample.js
var sample = __webpack_require__(84);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/take.js
var take = __webpack_require__(46);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = __webpack_require__(9);

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/clipboard/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set up Clipboard.js integration
 *
 * @param options - Options
 */
function setupClipboardJS({ alert$ }) {
    if (clipboard_default.a.isSupported()) {
        new Observable["a" /* Observable */](subscriber => {
            new clipboard_default.a("[data-clipboard-target], [data-clipboard-text]")
                .on("success", ev => subscriber.next(ev));
        })
            .subscribe(() => alert$.next(Object(_["c" /* translation */])("clipboard.copied")));
    }
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/empty.js
var empty = __webpack_require__(21);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/skip.js
var skip = __webpack_require__(82);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/catchError.js
var catchError = __webpack_require__(83);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/concatMap.js
var concatMap = __webpack_require__(85);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/skipUntil.js
var skipUntil = __webpack_require__(86);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js + 1 modules
var debounceTime = __webpack_require__(92);

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/instant/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */





/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Preprocess a list of URLs
 *
 * This function replaces the `site_url` in the sitemap with the actual base
 * URL, to allow instant loading to work in occasions like Netlify previews.
 *
 * @param urls - URLs
 *
 * @returns Processed URLs
 */
function preprocess(urls) {
    if (urls.length < 2)
        return urls;
    /* Compute references URLs */
    const [root, next] = urls.sort((a, b) => a.length - b.length);
    /* Compute common prefix */
    let index = 0;
    if (root === next)
        index = root.length;
    else
        while (root.charCodeAt(index) === root.charCodeAt(index))
            index++;
    /* Replace common prefix (i.e. base) with effective base */
    const config = Object(_["a" /* configuration */])();
    return urls.map(url => (url.replace(root.slice(0, index), `${config.base}/`)));
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set up instant loading
 *
 * When fetching, theoretically, we could use `responseType: "document"`, but
 * since all MkDocs links are relative, we need to make sure that the current
 * location matches the document we just loaded. Otherwise any relative links
 * in the document could use the old location.
 *
 * This is the reason why we need to synchronize history events and the process
 * of fetching the document for navigation changes (except `popstate` events):
 *
 * 1. Fetch document via `XMLHTTPRequest`
 * 2. Set new location via `history.pushState`
 * 3. Parse and emit fetched document
 *
 * For `popstate` events, we must not use `history.pushState`, or the forward
 * history will be irreversibly overwritten. In case the request fails, the
 * location change is dispatched regularly.
 *
 * @param options - Options
 */
function setupInstantLoading({ document$, location$, viewport$ }) {
    const config = Object(_["a" /* configuration */])();
    if (location.protocol === "file:")
        return;
    /* Disable automatic scroll restoration */
    if ("scrollRestoration" in history) {
        history.scrollRestoration = "manual";
        /* Hack: ensure that reloads restore viewport offset */
        Object(fromEvent["a" /* fromEvent */])(window, "beforeunload")
            .subscribe(() => {
            history.scrollRestoration = "auto";
        });
    }
    /* Hack: ensure absolute favicon link to omit 404s when switching */
    const favicon = Object(browser["d" /* getElement */])("link[rel='shortcut icon']");
    if (typeof favicon !== "undefined")
        favicon.href = favicon.href;
    /* Intercept internal navigation */
    const push$ = Object(browser["m" /* requestXML */])(`${config.base}/sitemap.xml`)
        .pipe(Object(map["a" /* map */])(sitemap => preprocess(Object(browser["h" /* getElements */])("loc", sitemap)
        .map(node => node.textContent))), Object(switchMap["a" /* switchMap */])(urls => Object(fromEvent["a" /* fromEvent */])(document.body, "click")
        .pipe(Object(filter["a" /* filter */])(ev => !ev.metaKey && !ev.ctrlKey), Object(switchMap["a" /* switchMap */])(ev => {
        if (ev.target instanceof HTMLElement) {
            const el = ev.target.closest("a");
            if (el && !el.target && urls.includes(el.href)) {
                ev.preventDefault();
                return Object(of["a" /* of */])({
                    url: new URL(el.href)
                });
            }
        }
        return never["a" /* NEVER */];
    }))), Object(share["a" /* share */])());
    /* Intercept history back and forward */
    const pop$ = Object(fromEvent["a" /* fromEvent */])(window, "popstate")
        .pipe(Object(filter["a" /* filter */])(ev => ev.state !== null), Object(map["a" /* map */])(ev => ({
        url: new URL(location.href),
        offset: ev.state
    })), Object(share["a" /* share */])());
    /* Emit location change */
    Object(merge["a" /* merge */])(push$, pop$)
        .pipe(Object(distinctUntilChanged["a" /* distinctUntilChanged */])((a, b) => a.url.href === b.url.href), Object(map["a" /* map */])(({ url }) => url))
        .subscribe(location$);
    /* Fetch document via `XMLHTTPRequest` */
    const response$ = location$
        .pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("pathname"), Object(skip["a" /* skip */])(1), Object(switchMap["a" /* switchMap */])(url => Object(browser["k" /* request */])(url.href)
        .pipe(Object(catchError["a" /* catchError */])(() => {
        Object(browser["p" /* setLocation */])(url);
        return never["a" /* NEVER */];
    }))), Object(share["a" /* share */])());
    /* Set new location via `history.pushState` */
    push$
        .pipe(Object(sample["a" /* sample */])(response$))
        .subscribe(({ url }) => {
        history.pushState({}, "", url.toString());
    });
    /* Parse and emit fetched document */
    const dom = new DOMParser();
    response$
        .pipe(Object(switchMap["a" /* switchMap */])(res => res.text()), Object(map["a" /* map */])(res => dom.parseFromString(res, "text/html")))
        .subscribe(document$);
    /* Emit history state change */
    Object(merge["a" /* merge */])(push$, pop$)
        .pipe(Object(sample["a" /* sample */])(document$))
        .subscribe(({ url, offset }) => {
        if (url.hash && !offset)
            Object(browser["q" /* setLocationHash */])(url.hash);
        else
            Object(browser["s" /* setViewportOffset */])(offset || { y: 0 });
    });
    /* Replace meta tags and components */
    document$
        .pipe(Object(skip["a" /* skip */])(1))
        .subscribe(replacement => {
        for (const selector of [
            /* Meta tags */
            "title",
            "link[rel='canonical']",
            "meta[name='author']",
            "meta[name='description']",
            /* Components */
            "[data-md-component=announce]",
            "[data-md-component=header-title]",
            "[data-md-component=container]",
            "[data-md-component=skip]"
        ]) {
            const source = Object(browser["d" /* getElement */])(selector);
            const target = Object(browser["d" /* getElement */])(selector, replacement);
            if (typeof source !== "undefined" &&
                typeof target !== "undefined") {
                Object(browser["j" /* replaceElement */])(source, target);
            }
        }
    });
    /* Re-evaluate scripts */
    document$
        .pipe(Object(skip["a" /* skip */])(1), Object(map["a" /* map */])(() => getComponentElement("container")), Object(switchMap["a" /* switchMap */])(el => Object(of["a" /* of */])(...Object(browser["h" /* getElements */])("script", el))), Object(concatMap["a" /* concatMap */])(el => {
        const script = Object(browser["b" /* createElement */])("script");
        if (el.src) {
            script.src = el.src;
            Object(browser["j" /* replaceElement */])(el, script);
            /* Complete when script is loaded */
            return new Observable["a" /* Observable */](observer => {
                script.onload = () => observer.complete();
            });
            /* Complete immediately */
        }
        else {
            script.textContent = el.textContent;
            Object(browser["j" /* replaceElement */])(el, script);
            return empty["a" /* EMPTY */];
        }
    }))
        .subscribe();
    /* Debounce update of viewport offset */
    viewport$
        .pipe(Object(skipUntil["a" /* skipUntil */])(push$), Object(debounceTime["a" /* debounceTime */])(250), Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("offset"))
        .subscribe(({ offset }) => {
        history.replaceState(offset, "");
    });
    /* Set viewport offset from history */
    Object(merge["a" /* merge */])(push$, pop$)
        .pipe(Object(bufferCount["a" /* bufferCount */])(2, 1), Object(filter["a" /* filter */])(([a, b]) => a.url.pathname === b.url.pathname), Object(map["a" /* map */])(([, state]) => state))
        .subscribe(({ offset }) => {
        Object(browser["s" /* setViewportOffset */])(offset || { y: 0 });
    });
}

// EXTERNAL MODULE: ./node_modules/escape-html/index.js
var escape_html = __webpack_require__(53);
var escape_html_default = /*#__PURE__*/__webpack_require__.n(escape_html);

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/document/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Create a search document mapping
 *
 * @param docs - Search index documents
 *
 * @returns Search document map
 */
function setupSearchDocumentMap(docs) {
    const documents = new Map();
    const parents = new Set();
    for (const doc of docs) {
        const [path, hash] = doc.location.split("#");
        /* Extract location and title */
        const location = doc.location;
        const title = doc.title;
        /* Escape and cleanup text */
        const text = escape_html_default()(doc.text)
            .replace(/\s+(?=[,.:;!?])/g, "")
            .replace(/\s+/g, " ");
        /* Handle section */
        if (hash) {
            const parent = documents.get(path);
            /* Ignore first section, override article */
            if (!parents.has(parent)) {
                parent.title = doc.title;
                parent.text = text;
                /* Remember that we processed the article */
                parents.add(parent);
                /* Add subsequent section */
            }
            else {
                documents.set(location, {
                    location,
                    title,
                    text,
                    parent
                });
            }
            /* Add article */
        }
        else {
            documents.set(location, {
                location,
                title,
                text
            });
        }
    }
    return documents;
}

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/highlighter/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Create a search highlighter
 *
 * @param config - Search index configuration
 *
 * @returns Search highlight factory function
 */
function setupSearchHighlighter(config) {
    const separator = new RegExp(config.separator, "img");
    const highlight = (_, data, term) => {
        return `${data}<mark data-md-highlight>${term}</mark>`;
    };
    /* Return factory function */
    return (query) => {
        query = query
            .replace(/[\s*+\-:~^]+/g, " ")
            .trim();
        /* Create search term match expression */
        const match = new RegExp(`(^|${config.separator})(${query
            .replace(/[|\\{}()[\]^$+*?.-]/g, "\\$&")
            .replace(separator, "|")})`, "img");
        /* Highlight string value */
        return value => value
            .replace(match, highlight)
            .replace(/<\/mark>(\s+)<mark[^>]*>/img, "$1");
    };
}

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/query/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Parse a search query for analysis
 *
 * @param value - Query value
 *
 * @returns Search query clauses
 */
function parseSearchQuery(value) {
    const query = new lunr.Query(["title", "text"]);
    const parser = new lunr.QueryParser(value, query);
    /* Parse and return query clauses */
    parser.parse();
    return query.clauses;
}
/**
 * Analyze the search query clauses in regard to the search terms found
 *
 * @param query - Search query clauses
 * @param terms - Search terms
 *
 * @returns Search query terms
 */
function getSearchQueryTerms(query, terms) {
    const clauses = new Set(query);
    /* Match query clauses against terms */
    const result = {};
    for (let t = 0; t < terms.length; t++)
        for (const clause of clauses)
            if (terms[t].startsWith(clause.term)) {
                result[clause.term] = true;
                clauses.delete(clause);
            }
    /* Annotate unmatched query clauses */
    for (const clause of clauses)
        result[clause.term] = false;
    /* Return query terms */
    return result;
}

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/query/transform/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Default transformation function
 *
 * 1. Search for terms in quotation marks and prepend a `+` modifier to denote
 *    that the resulting document must contain all terms, converting the query
 *    to an `AND` query (as opposed to the default `OR` behavior). While users
 *    may expect terms enclosed in quotation marks to map to span queries, i.e.
 *    for which order is important, `lunr` doesn't support them, so the best
 *    we can do is to convert the terms to an `AND` query.
 *
 * 2. Replace control characters which are not located at the beginning of the
 *    query or preceded by white space, or are not followed by a non-whitespace
 *    character or are at the end of the query string. Furthermore, filter
 *    unmatched quotation marks.
 *
 * 3. Trim excess whitespace from left and right.
 *
 * @param query - Query value
 *
 * @returns Transformed query value
 */
function defaultTransform(query) {
    return query
        .split(/"([^"]+)"/g) /* => 1 */
        .map((terms, index) => index & 1
        ? terms.replace(/^\b|^(?![^\x00-\x7F]|$)|\s+/g, " +")
        : terms)
        .join("")
        .replace(/"|(?:^|\s+)[*+\-:^~]+(?=\s+|$)/g, "") /* => 2 */
        .trim(); /* => 3 */
}

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/query/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Compute the difference of two lists of strings
 *
 * @param a - 1st list of strings
 * @param b - 2nd list of strings
 *
 * @returns Difference
 */
function difference(a, b) {
    const [x, y] = [new Set(a), new Set(b)];
    return [
        ...new Set([...x].filter(value => !y.has(value)))
    ];
}
/* ----------------------------------------------------------------------------
 * Class
 * ------------------------------------------------------------------------- */
/**
 * Search index
 *
 * Note that `lunr` is injected via Webpack, as it will otherwise also be
 * bundled in the application bundle.
 */
class _Search {
    /**
     * Create the search integration
     *
     * @param data - Search index
     */
    constructor({ config, docs, pipeline, index }) {
        this.documents = setupSearchDocumentMap(docs);
        this.highlight = setupSearchHighlighter(config);
        /* Set separator for tokenizer */
        lunr.tokenizer.separator = new RegExp(config.separator);
        /* If no index was given, create it */
        if (typeof index === "undefined") {
            this.index = lunr(function () {
                /* Set up multi-language support */
                if (config.lang.length === 1 && config.lang[0] !== "en") {
                    this.use(lunr[config.lang[0]]);
                }
                else if (config.lang.length > 1) {
                    this.use(lunr.multiLanguage(...config.lang));
                }
                /* Compute functions to be removed from the pipeline */
                const fns = difference([
                    "trimmer", "stopWordFilter", "stemmer"
                ], pipeline);
                /* Remove functions from the pipeline for registered languages */
                for (const lang of config.lang.map(language => (language === "en" ? lunr : lunr[language]))) {
                    for (const fn of fns) {
                        this.pipeline.remove(lang[fn]);
                        this.searchPipeline.remove(lang[fn]);
                    }
                }
                /* Set up fields and reference */
                this.field("title", { boost: 1000 });
                this.field("text");
                this.ref("location");
                /* Index documents */
                for (const doc of docs)
                    this.add(doc);
            });
            /* Handle prebuilt index */
        }
        else {
            this.index = lunr.Index.load(index);
        }
    }
    /**
     * Search for matching documents
     *
     * The search index which MkDocs provides is divided up into articles, which
     * contain the whole content of the individual pages, and sections, which only
     * contain the contents of the subsections obtained by breaking the individual
     * pages up at `h1` ... `h6`. As there may be many sections on different pages
     * with identical titles (for example within this very project, e.g. "Usage"
     * or "Installation"), they need to be put into the context of the containing
     * page. For this reason, section results are grouped within their respective
     * articles which are the top-level results that are returned.
     *
     * @param query - Query value
     *
     * @returns Search results
     */
    search(query) {
        if (query) {
            try {
                const highlight = this.highlight(query);
                /* Parse query to extract clauses for analysis */
                const clauses = parseSearchQuery(query)
                    .filter(clause => (clause.presence !== lunr.Query.presence.PROHIBITED));
                /* Perform search and post-process results */
                const groups = this.index.search(`${query}*`)
                    /* Apply post-query boosts based on title and search query terms */
                    .reduce((results, { ref, score, matchData }) => {
                    const document = this.documents.get(ref);
                    if (typeof document !== "undefined") {
                        const { location, title, text, parent } = document;
                        /* Compute and analyze search query terms */
                        const terms = getSearchQueryTerms(clauses, Object.keys(matchData.metadata));
                        /* Highlight title and text and apply post-query boosts */
                        const boost = +!parent + +Object.values(terms).every(t => t);
                        results.push({
                            location,
                            title: highlight(title),
                            text: highlight(text),
                            score: score * (1 + boost),
                            terms
                        });
                    }
                    return results;
                }, [])
                    /* Sort search results again after applying boosts */
                    .sort((a, b) => b.score - a.score)
                    /* Group search results by page */
                    .reduce((results, result) => {
                    const document = this.documents.get(result.location);
                    if (typeof document !== "undefined") {
                        const ref = "parent" in document
                            ? document.parent.location
                            : document.location;
                        results.set(ref, [...results.get(ref) || [], result]);
                    }
                    return results;
                }, new Map());
                /* Expand grouped search results */
                return [...groups.values()];
                /* Log errors to console (for now) */
            }
            catch (_a) {
                console.warn(`Invalid query: ${query} – see https://bit.ly/2s3ChXG`);
            }
        }
        /* Return nothing in case of error or empty query */
        return [];
    }
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/from.js + 12 modules
var from = __webpack_require__(10);

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/worker/message/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A RTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Types
 * ------------------------------------------------------------------------- */
/**
 * Search message type
 */
var SearchMessageType;
(function (SearchMessageType) {
    SearchMessageType[SearchMessageType["SETUP"] = 0] = "SETUP";
    SearchMessageType[SearchMessageType["READY"] = 1] = "READY";
    SearchMessageType[SearchMessageType["QUERY"] = 2] = "QUERY";
    SearchMessageType[SearchMessageType["RESULT"] = 3] = "RESULT"; /* Search results */
})(SearchMessageType || (SearchMessageType = {}));
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Type guard for search setup messages
 *
 * @param message - Search worker message
 *
 * @returns Test result
 */
function isSearchSetupMessage(message) {
    return message.type === SearchMessageType.SETUP;
}
/**
 * Type guard for search ready messages
 *
 * @param message - Search worker message
 *
 * @returns Test result
 */
function isSearchReadyMessage(message) {
    return message.type === SearchMessageType.READY;
}
/**
 * Type guard for search query messages
 *
 * @param message - Search worker message
 *
 * @returns Test result
 */
function isSearchQueryMessage(message) {
    return message.type === SearchMessageType.QUERY;
}
/**
 * Type guard for search result messages
 *
 * @param message - Search worker message
 *
 * @returns Test result
 */
function isSearchResultMessage(message) {
    return message.type === SearchMessageType.RESULT;
}

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/worker/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A RTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */





/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Set up search index
 *
 * @param data - Search index
 *
 * @returns Search index
 */
function setupSearchIndex({ config, docs, index }) {
    /* Override default language with value from translation */
    if (config.lang.length === 1 && config.lang[0] === "en")
        config.lang = [
            Object(_["c" /* translation */])("search.config.lang")
        ];
    /* Override default separator with value from translation */
    if (config.separator === "[\\s\\-]+")
        config.separator = Object(_["c" /* translation */])("search.config.separator");
    /* Set pipeline from translation */
    const pipeline = Object(_["c" /* translation */])("search.config.pipeline")
        .split(/\s*,\s*/)
        .filter(Boolean);
    /* Return search index after defaulting */
    return { config, docs, index, pipeline };
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Set up search worker
 *
 * This function will create a web worker to set up and query the search index
 * which is done using `lunr`. The index must be passed as an observable to
 * enable hacks like _localsearch_ via search index embedding as JSON.
 *
 * @param url - Worker URL
 * @param index - Search index observable input
 *
 * @returns Search worker
 */
function setupSearchWorker(url, index) {
    const config = Object(_["a" /* configuration */])();
    const worker = new Worker(url);
    /* Create communication channels and resolve relative links */
    const tx$ = new Subject["a" /* Subject */]();
    const rx$ = Object(browser["F" /* watchWorker */])(worker, { tx$ })
        .pipe(Object(map["a" /* map */])(message => {
        if (isSearchResultMessage(message)) {
            for (const result of message.data)
                for (const document of result)
                    document.location = `${config.base}/${document.location}`;
        }
        return message;
    }), Object(share["a" /* share */])());
    /* Set up search index */
    Object(from["a" /* from */])(index)
        .pipe(Object(map["a" /* map */])(data => ({
        type: SearchMessageType.SETUP,
        data: setupSearchIndex(data)
    })))
        .subscribe(tx$.next.bind(tx$));
    /* Return search worker */
    return { tx$, rx$ };
}

// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/worker/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/integrations/search/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */






// CONCATENATED MODULE: ./src/assets/javascripts/integrations/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(87);

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeLast.js
var takeLast = __webpack_require__(88);

// CONCATENATED MODULE: ./src/assets/javascripts/components/search/query/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */





/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch search query
 *
 * Note that the focus event which triggers re-reading the current query value
 * is delayed by `1ms` so the input's empty state is allowed to propagate.
 *
 * @param el - Search query element
 *
 * @returns Search query observable
 */
function watchSearchQuery(el) {
    const fn = (__search === null || __search === void 0 ? void 0 : __search.transform) || defaultTransform;
    /* Intercept focus and input events */
    const focus$ = Object(browser["u" /* watchElementFocus */])(el);
    const value$ = Object(merge["a" /* merge */])(Object(fromEvent["a" /* fromEvent */])(el, "keyup"), Object(fromEvent["a" /* fromEvent */])(el, "focus").pipe(Object(delay["a" /* delay */])(1)))
        .pipe(Object(map["a" /* map */])(() => fn(el.value)), Object(startWith["a" /* startWith */])(fn(el.value)), Object(distinctUntilChanged["a" /* distinctUntilChanged */])());
    /* Combine into single observable */
    return Object(combineLatest["a" /* combineLatest */])([value$, focus$])
        .pipe(Object(map["a" /* map */])(([value, focus]) => ({ value, focus })));
}
/**
 * Mount search query
 *
 * @param el - Search query element
 * @param worker - Search worker
 *
 * @returns Search query component observable
 */
function mountSearchQuery(el, { tx$ }) {
    const internal$ = new Subject["a" /* Subject */]();
    /* Handle value changes */
    internal$
        .pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("value"), Object(map["a" /* map */])(({ value }) => ({
        type: SearchMessageType.QUERY,
        data: value
    })))
        .subscribe(tx$.next.bind(tx$));
    /* Handle focus changes */
    internal$
        .pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("focus"))
        .subscribe(({ focus }) => {
        if (focus) {
            Object(browser["r" /* setToggle */])("search", focus);
            Object(actions["u" /* setSearchQueryPlaceholder */])(el, "");
        }
        else {
            Object(actions["h" /* resetSearchQueryPlaceholder */])(el);
        }
    });
    /* Handle reset */
    Object(fromEvent["a" /* fromEvent */])(el.form, "reset")
        .pipe(Object(takeUntil["a" /* takeUntil */])(internal$.pipe(Object(takeLast["a" /* takeLast */])(1))))
        .subscribe(() => Object(browser["n" /* setElementFocus */])(el));
    /* Create and return component */
    return watchSearchQuery(el)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/zipWith.js + 1 modules
var zipWith = __webpack_require__(93);

// CONCATENATED MODULE: ./src/assets/javascripts/components/search/result/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */






/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Mount search result list
 *
 * This function will perform a lazy rendering of the search results, depending
 * on the vertical offset of the search result container.
 *
 * @param el - Search result list element
 * @param worker - Search worker
 * @param options - Options
 *
 * @returns Search result list component observable
 */
function mountSearchResult(el, { rx$ }, { query$ }) {
    const internal$ = new Subject["a" /* Subject */]();
    const boundary$ = Object(browser["w" /* watchElementThreshold */])(el.parentElement)
        .pipe(Object(filter["a" /* filter */])(Boolean));
    /* Update search result metadata */
    const meta = Object(browser["f" /* getElementOrThrow */])(":scope > :first-child", el);
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]), Object(withLatestFrom["a" /* withLatestFrom */])(query$))
        .subscribe(([{ data }, { value }]) => {
        if (value)
            Object(actions["v" /* setSearchResultMeta */])(meta, data.length);
        else
            Object(actions["j" /* resetSearchResultMeta */])(meta);
    });
    /* Update search result list */
    const list = Object(browser["f" /* getElementOrThrow */])(":scope > :last-child", el);
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]), Object(tap["a" /* tap */])(() => Object(actions["i" /* resetSearchResultList */])(list)), Object(switchMap["a" /* switchMap */])(({ data }) => Object(merge["a" /* merge */])(Object(of["a" /* of */])(...data.slice(0, 10)), Object(of["a" /* of */])(...data.slice(10))
        .pipe(Object(bufferCount["a" /* bufferCount */])(4), Object(zipWith["a" /* zipWith */])(boundary$), Object(switchMap["a" /* switchMap */])(([chunk]) => Object(of["a" /* of */])(...chunk))))))
        .subscribe(result => {
        Object(actions["a" /* addToSearchResultList */])(list, renderSearchResult(result));
    });
    /* Filter search result list */
    const result$ = rx$
        .pipe(Object(filter["a" /* filter */])(isSearchResultMessage), Object(map["a" /* map */])(({ data }) => ({ data })), Object(startWith["a" /* startWith */])({ data: [] }));
    /* Create and return component */
    return result$
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/search/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */








/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Fetch search index
 *
 * @param url - Search index URL
 *
 * @returns Promise or observable
 */
function fetchSearchIndex(url) {
    return (__search === null || __search === void 0 ? void 0 : __search.index) || Object(browser["l" /* requestJSON */])(url);
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Mount search
 *
 * This function sets up the search functionality, including the underlying
 * web worker and all keyboard bindings.
 *
 * @param el - Search element
 * @param options - Options
 *
 * @returns Search component observable
 */
function mountSearch(el, { keyboard$ }) {
    if (location.protocol === "file:")
        return never["a" /* NEVER */];
    /* Set up search worker */
    const config = Object(_["a" /* configuration */])();
    const worker = setupSearchWorker(config.search, fetchSearchIndex(`${config.base}/search/search_index.json`));
    /* Retrieve nested components */
    const query = getComponentElement("search-query", el);
    const result = getComponentElement("search-result", el);
    /* Re-emit query when search is ready */
    const { tx$, rx$ } = worker;
    tx$
        .pipe(Object(filter["a" /* filter */])(isSearchQueryMessage), Object(sample["a" /* sample */])(rx$.pipe(Object(filter["a" /* filter */])(isSearchReadyMessage))), Object(take["a" /* take */])(1))
        .subscribe(tx$.next.bind(tx$));
    /* Set up search keyboard handlers */
    keyboard$
        .pipe(Object(filter["a" /* filter */])(({ mode }) => mode === "search"))
        .subscribe(key => {
        const active = Object(browser["c" /* getActiveElement */])();
        switch (key.type) {
            /* Enter: prevent form submission */
            case "Enter":
                if (active === query)
                    key.claim();
                break;
            /* Escape or Tab: close search */
            case "Escape":
            case "Tab":
                Object(browser["r" /* setToggle */])("search", false);
                Object(browser["n" /* setElementFocus */])(query, false);
                break;
            /* Vertical arrows: select previous or next search result */
            case "ArrowUp":
            case "ArrowDown":
                if (typeof active === "undefined") {
                    Object(browser["n" /* setElementFocus */])(query);
                }
                else {
                    const els = [query, ...Object(browser["h" /* getElements */])(":not(details) > [href], summary, details[open] [href]", result)];
                    const i = Math.max(0, (Math.max(0, els.indexOf(active)) + els.length + (key.type === "ArrowUp" ? -1 : +1)) % els.length);
                    Object(browser["n" /* setElementFocus */])(els[i]);
                }
                /* Prevent scrolling of page */
                key.claim();
                break;
            /* All other keys: hand to search query */
            default:
                if (query !== Object(browser["c" /* getActiveElement */])())
                    Object(browser["n" /* setElementFocus */])(query);
        }
    });
    /* Set up global keyboard handlers */
    keyboard$
        .pipe(Object(filter["a" /* filter */])(({ mode }) => mode === "global"))
        .subscribe(key => {
        switch (key.type) {
            /* Open search and select query */
            case "f":
            case "s":
            case "/":
                Object(browser["n" /* setElementFocus */])(query);
                Object(browser["o" /* setElementSelection */])(query);
                key.claim();
                break;
        }
    });
    /* Create and return component */
    const query$ = mountSearchQuery(query, worker);
    return Object(merge["a" /* merge */])(query$, mountSearchResult(result, worker, { query$ }));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/search/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(29);

// CONCATENATED MODULE: ./src/assets/javascripts/components/sidebar/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch sidebar
 *
 * This function returns an observable that computes the visual parameters of
 * the sidebar which depends on the vertical viewport offset, as well as the
 * height of the main area. When the page is scrolled beyond the header, the
 * sidebar is locked and fills the remaining space.
 *
 * @param el - Sidebar element
 * @param options - Options
 *
 * @returns Sidebar observable
 */
function watchSidebar(el, { viewport$, main$ }) {
    const adjust = el.parentElement.offsetTop -
        el.parentElement.parentElement.offsetTop;
    /* Compute the sidebar's available height and if it should be locked */
    return Object(combineLatest["a" /* combineLatest */])([main$, viewport$])
        .pipe(Object(map["a" /* map */])(([{ offset, height }, { offset: { y } }]) => {
        height = height
            + Math.min(adjust, Math.max(0, y - offset))
            - adjust;
        return {
            height,
            locked: y >= offset + adjust
        };
    }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])((a, b) => (a.height === b.height &&
        a.locked === b.locked)));
}
/**
 * Mount sidebar
 *
 * @param el - Sidebar element
 * @param options - Options
 *
 * @returns Sidebar component observable
 */
function mountSidebar(el, _a) {
    var { header$ } = _a, options = Object(tslib_es6["c" /* __rest */])(_a, ["header$"]);
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]), Object(withLatestFrom["a" /* withLatestFrom */])(header$))
        .subscribe({
        /* Update height and offset */
        next([{ height }, { height: offset }]) {
            Object(actions["w" /* setSidebarHeight */])(el, height);
            Object(actions["x" /* setSidebarOffset */])(el, offset);
        },
        /* Reset on complete */
        complete() {
            Object(actions["l" /* resetSidebarOffset */])(el);
            Object(actions["k" /* resetSidebarHeight */])(el);
        }
    });
    /* Create and return component */
    return watchSidebar(el, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js
var defaultIfEmpty = __webpack_require__(89);

// CONCATENATED MODULE: ./src/assets/javascripts/components/source/facts/github/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Fetch GitHub repository facts
 *
 * @param user - GitHub user
 * @param repo - GitHub repository
 *
 * @returns Repository facts observable
 */
function fetchSourceFactsFromGitHub(user, repo) {
    const url = typeof repo !== "undefined"
        ? `https://api.github.com/repos/${user}/${repo}`
        : `https://api.github.com/users/${user}`;
    return Object(browser["l" /* requestJSON */])(url)
        .pipe(Object(map["a" /* map */])(data => {
        /* GitHub repository */
        if (typeof repo !== "undefined") {
            const { stargazers_count, forks_count } = data;
            return [
                `${Object(utilities["c" /* round */])(stargazers_count)} Stars`,
                `${Object(utilities["c" /* round */])(forks_count)} Forks`
            ];
            /* GitHub user/organization */
        }
        else {
            const { public_repos } = data;
            return [
                `${Object(utilities["c" /* round */])(public_repos)} Repositories`
            ];
        }
    }), Object(defaultIfEmpty["a" /* defaultIfEmpty */])([]));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/source/facts/gitlab/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Fetch GitLab repository facts
 *
 * @param base - GitLab base
 * @param project - GitLab project
 *
 * @returns Repository facts observable
 */
function fetchSourceFactsFromGitLab(base, project) {
    const url = `https://${base}/api/v4/projects/${encodeURIComponent(project)}`;
    return Object(browser["l" /* requestJSON */])(url)
        .pipe(Object(map["a" /* map */])(({ star_count, forks_count }) => ([
        `${Object(utilities["c" /* round */])(star_count)} Stars`,
        `${Object(utilities["c" /* round */])(forks_count)} Forks`
    ])), Object(defaultIfEmpty["a" /* defaultIfEmpty */])([]));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/source/facts/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Fetch repository facts
 *
 * @param url - Repository URL
 *
 * @returns Repository facts observable
 */
function fetchSourceFacts(url) {
    const [type] = url.match(/(git(?:hub|lab))/i) || [];
    switch (type.toLowerCase()) {
        /* GitHub repository */
        case "github":
            const [, user, repo] = url.match(/^.+github\.com\/([^/]+)\/?([^/]+)?/i);
            return fetchSourceFactsFromGitHub(user, repo);
        /* GitLab repository */
        case "gitlab":
            const [, base, slug] = url.match(/^.+?([^/]*gitlab[^/]+)\/(.+?)\/?$/i);
            return fetchSourceFactsFromGitLab(base, slug);
        /* Everything else */
        default:
            return never["a" /* NEVER */];
    }
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/source/facts/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




// CONCATENATED MODULE: ./src/assets/javascripts/components/source/_/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */






/* ----------------------------------------------------------------------------
 * Data
 * ------------------------------------------------------------------------- */
/**
 * Repository facts observable
 */
let fetch$;
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch repository information
 *
 * This function will try to read the repository facts from session storage,
 * and if unsuccessful, fetch them from the underlying provider.
 *
 * @param el - Repository information element
 *
 * @returns Repository information observable
 */
function watchSource(el) {
    const digest = Object(utilities["b" /* hash */])(el.href).toString();
    /* Fetch repository facts once */
    return fetch$ || (fetch$ = Object(defer["a" /* defer */])(() => {
        const data = sessionStorage.getItem(digest);
        if (data) {
            return Object(of["a" /* of */])(JSON.parse(data));
        }
        else {
            const value$ = fetchSourceFacts(el.href);
            value$.subscribe(value => {
                try {
                    sessionStorage.setItem(digest, JSON.stringify(value));
                }
                catch (err) {
                    /* Uncritical, just swallow */
                }
            });
            /* Return value */
            return value$;
        }
    })
        .pipe(Object(catchError["a" /* catchError */])(() => never["a" /* NEVER */]), Object(filter["a" /* filter */])(facts => facts.length > 0), Object(map["a" /* map */])(facts => ({ facts })), Object(shareReplay["a" /* shareReplay */])(1)));
}
/**
 * Mount repository information
 *
 * @param el - Repository information element
 *
 * @returns Repository information component observable
 */
function mountSource(el) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$.subscribe(({ facts }) => {
        Object(actions["y" /* setSourceFacts */])(el, renderSourceFacts(facts));
        Object(actions["z" /* setSourceState */])(el, "done");
    });
    /* Create and return component */
    return watchSource(el)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/source/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/components/tabs/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch navigation tabs
 *
 * @param el - Navigation tabs element
 * @param options - Options
 *
 * @returns Navigation tabs observable
 */
function watchTabs(el, { viewport$, header$ }) {
    return Object(browser["E" /* watchViewportAt */])(el, { header$, viewport$ })
        .pipe(Object(map["a" /* map */])(({ offset: { y } }) => {
        return {
            hidden: y >= 10
        };
    }), Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("hidden"));
}
/**
 * Mount navigation tabs
 *
 * This function hides the navigation tabs when scrolling past the threshold
 * and makes them reappear in a nice CSS animation when scrolling back up.
 *
 * @param el - Navigation tabs element
 * @param options - Options
 *
 * @returns Navigation tabs component observable
 */
function mountTabs(el, options) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]))
        .subscribe({
        /* Update state */
        next({ hidden }) {
            if (hidden)
                Object(actions["A" /* setTabsState */])(el, "hidden");
            else
                Object(actions["m" /* resetTabsState */])(el);
        },
        /* Reset on complete */
        complete() {
            Object(actions["m" /* resetTabsState */])(el);
        }
    });
    /* Create and return component */
    return watchTabs(el, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/scan.js + 1 modules
var scan = __webpack_require__(94);

// CONCATENATED MODULE: ./src/assets/javascripts/components/toc/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Watch table of contents
 *
 * This is effectively a scroll spy implementation which will account for the
 * fixed header and automatically re-calculate anchor offsets when the viewport
 * is resized. The returned observable will only emit if the table of contents
 * needs to be repainted.
 *
 * This implementation tracks an anchor element's entire path starting from its
 * level up to the top-most anchor element, e.g. `[h3, h2, h1]`. Although the
 * Material theme currently doesn't make use of this information, it enables
 * the styling of the entire hierarchy through customization.
 *
 * Note that the current anchor is the last item of the `prev` anchor list.
 *
 * @param anchors - Anchor elements
 * @param options - Options
 *
 * @returns Table of contents observable
 */
function watchTableOfContents(anchors, { viewport$, header$ }) {
    const table = new Map();
    for (const anchor of anchors) {
        const id = decodeURIComponent(anchor.hash.substring(1));
        const target = Object(browser["d" /* getElement */])(`[id="${id}"]`);
        if (typeof target !== "undefined")
            table.set(anchor, target);
    }
    /* Compute necessary adjustment for header */
    const adjust$ = header$
        .pipe(Object(map["a" /* map */])(header => 24 + header.height));
    /* Compute partition of previous and next anchors */
    const partition$ = Object(browser["v" /* watchElementSize */])(document.body)
        .pipe(Object(distinctUntilKeyChanged["a" /* distinctUntilKeyChanged */])("height"), 
    /* Build index to map anchor paths to vertical offsets */
    Object(map["a" /* map */])(() => {
        let path = [];
        return [...table].reduce((index, [anchor, target]) => {
            while (path.length) {
                const last = table.get(path[path.length - 1]);
                if (last.tagName >= target.tagName) {
                    path.pop();
                }
                else {
                    break;
                }
            }
            /* If the current anchor is hidden, continue with its parent */
            let offset = target.offsetTop;
            while (!offset && target.parentElement) {
                target = target.parentElement;
                offset = target.offsetTop;
            }
            /* Map reversed anchor path to vertical offset */
            return index.set([...path = [...path, anchor]].reverse(), offset);
        }, new Map());
    }), 
    /* Re-compute partition when viewport offset changes */
    Object(switchMap["a" /* switchMap */])(index => Object(combineLatest["a" /* combineLatest */])([adjust$, viewport$])
        .pipe(Object(scan["a" /* scan */])(([prev, next], [adjust, { offset: { y } }]) => {
        /* Look forward */
        while (next.length) {
            const [, offset] = next[0];
            if (offset - adjust < y) {
                prev = [...prev, next.shift()];
            }
            else {
                break;
            }
        }
        /* Look backward */
        while (prev.length) {
            const [, offset] = prev[prev.length - 1];
            if (offset - adjust >= y) {
                next = [prev.pop(), ...next];
            }
            else {
                break;
            }
        }
        /* Return partition */
        return [prev, next];
    }, [[], [...index]]), Object(distinctUntilChanged["a" /* distinctUntilChanged */])((a, b) => (a[0] === b[0] &&
        a[1] === b[1])))));
    /* Compute and return anchor list migrations */
    return partition$
        .pipe(Object(map["a" /* map */])(([prev, next]) => ({
        prev: prev.map(([path]) => path),
        next: next.map(([path]) => path)
    })), 
    /* Extract anchor list migrations */
    Object(startWith["a" /* startWith */])({ prev: [], next: [] }), Object(bufferCount["a" /* bufferCount */])(2, 1), Object(map["a" /* map */])(([a, b]) => {
        /* Moving down */
        if (a.prev.length < b.prev.length) {
            return {
                prev: b.prev.slice(Math.max(0, a.prev.length - 1), b.prev.length),
                next: []
            };
            /* Moving up */
        }
        else {
            return {
                prev: b.prev.slice(-1),
                next: b.next.slice(0, b.next.length - a.next.length)
            };
        }
    }));
}
/* ------------------------------------------------------------------------- */
/**
 * Mount table of contents
 *
 * @param el - Anchor list element
 * @param options - Options
 *
 * @returns Table of contents component observable
 */
function mountTableOfContents(el, options) {
    const internal$ = new Subject["a" /* Subject */]();
    internal$
        .pipe(Object(observeOn["a" /* observeOn */])(animationFrame["a" /* animationFrameScheduler */]))
        .subscribe(({ prev, next }) => {
        /* Look forward */
        for (const [anchor] of next) {
            Object(actions["b" /* resetAnchorActive */])(anchor);
            Object(actions["c" /* resetAnchorState */])(anchor);
        }
        /* Look backward */
        for (const [index, [anchor]] of prev.entries()) {
            Object(actions["n" /* setAnchorActive */])(anchor, index === prev.length - 1);
            Object(actions["o" /* setAnchorState */])(anchor, "blur");
        }
    });
    /* Create and return component */
    const anchors = Object(browser["h" /* getElements */])("[href^=\\#]", el);
    return watchTableOfContents(anchors, options)
        .pipe(Object(tap["a" /* tap */])(internal$), Object(finalize["a" /* finalize */])(() => internal$.complete()), Object(map["a" /* map */])(state => (Object.assign({ ref: el }, state))));
}

// CONCATENATED MODULE: ./src/assets/javascripts/components/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */











// CONCATENATED MODULE: ./src/assets/javascripts/patches/indeterminate/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Patch indeterminate checkboxes
 *
 * This function will replace the indeterminate "pseudo state" with the actual
 * indeterminate state, which is used to keep navigation always expanded.
 *
 * @param options - Options
 */
function patchIndeterminate({ document$ }) {
    document$.subscribe(() => {
        for (const el of Object(browser["h" /* getElements */])("[data-md-state=indeterminate]")) {
            el.setAttribute("data-md-state", "");
            el.indeterminate = true;
            el.checked = false;
        }
    });
}

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js + 1 modules
var mergeMap = __webpack_require__(18);

// CONCATENATED MODULE: ./src/assets/javascripts/patches/scrollfix/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Check whether the given device is an Apple device
 *
 * @returns Test result
 */
function isAppleDevice() {
    return /(iPad|iPhone|iPod)/.test(navigator.userAgent);
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Patch all elements with `data-md-scrollfix` attributes
 *
 * This is a year-old patch which ensures that overflow scrolling works at the
 * top and bottom of containers on iOS by ensuring a `1px` scroll offset upon
 * the start of a touch event.
 *
 * @see https://bit.ly/2SCtAOO - Original source
 *
 * @param options - Options
 */
function patchScrollfix({ document$ }) {
    document$
        .pipe(Object(switchMap["a" /* switchMap */])(() => Object(of["a" /* of */])(...Object(browser["h" /* getElements */])("[data-md-scrollfix]"))), Object(tap["a" /* tap */])(el => el.removeAttribute("data-md-scrollfix")), Object(filter["a" /* filter */])(isAppleDevice), Object(mergeMap["a" /* mergeMap */])(el => Object(fromEvent["a" /* fromEvent */])(el, "touchstart")
        .pipe(Object(mapTo["a" /* mapTo */])(el))))
        .subscribe(el => {
        const top = el.scrollTop;
        /* We're at the top of the container */
        if (top === 0) {
            el.scrollTop = 1;
            /* We're at the bottom of the container */
        }
        else if (top + el.offsetHeight === el.scrollHeight) {
            el.scrollTop = top - 1;
        }
    });
}

// CONCATENATED MODULE: ./src/assets/javascripts/patches/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



// CONCATENATED MODULE: ./src/assets/javascripts/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */








/* ----------------------------------------------------------------------------
 * Application
 * ------------------------------------------------------------------------- */
/* Yay, JavaScript is available */
document.documentElement.classList.remove("no-js");
document.documentElement.classList.add("js");
/* Set up navigation observables */
const javascripts_document$ = Object(browser["t" /* watchDocument */])();
const javascripts_location$ = Object(browser["y" /* watchLocation */])();
const javascripts_target$ = Object(browser["z" /* watchLocationTarget */])();
const javascripts_keyboard$ = Object(browser["x" /* watchKeyboard */])();
/* Set up media observables */
const javascripts_viewport$ = Object(browser["D" /* watchViewport */])();
const tablet$ = Object(browser["A" /* watchMedia */])("(min-width: 960px)");
const screen$ = Object(browser["A" /* watchMedia */])("(min-width: 1220px)");
const javascripts_print$ = Object(browser["B" /* watchPrint */])();
/* Set up Clipboard.js integration */
const javascripts_alert$ = new Subject["a" /* Subject */]();
setupClipboardJS({ alert$: javascripts_alert$ });
/* Set up instant loading, if enabled */
if (Object(_["b" /* feature */])("navigation.instant"))
    setupInstantLoading({ document$: javascripts_document$, location$: javascripts_location$, viewport$: javascripts_viewport$ });
/* Always close drawer on navigation */
Object(merge["a" /* merge */])(javascripts_location$, javascripts_target$)
    .subscribe(() => Object(browser["r" /* setToggle */])("drawer", false));
/* Set up global keyboard handlers */
javascripts_keyboard$
    .pipe(Object(filter["a" /* filter */])(({ mode }) => mode === "global"))
    .subscribe(key => {
    switch (key.type) {
        /* Go to previous page */
        case "p":
        case ",":
            const prev = Object(browser["d" /* getElement */])("[href][rel=prev]");
            if (typeof prev !== "undefined")
                prev.click();
            break;
        /* Go to next page */
        case "n":
        case ".":
            const next = Object(browser["d" /* getElement */])("[href][rel=next]");
            if (typeof next !== "undefined")
                next.click();
            break;
    }
});
/* Set up patches */
patchIndeterminate({ document$: javascripts_document$ });
patchScrollfix({ document$: javascripts_document$ });
/* Set up header and main area observable */
const javascripts_header$ = watchHeader(getComponentElement("header"), { viewport$: javascripts_viewport$ });
const javascripts_main$ = javascripts_document$
    .pipe(Object(map["a" /* map */])(() => getComponentElement("main")), Object(switchMap["a" /* switchMap */])(el => watchMain(el, { viewport$: javascripts_viewport$, header$: javascripts_header$ })), Object(shareReplay["a" /* shareReplay */])(1));
/* Set up control component observables */
const control$ = Object(merge["a" /* merge */])(
/* Dialog */
...getComponentElements("dialog")
    .map(el => mountDialog(el, { alert$: javascripts_alert$ })), 
/* Header */
...getComponentElements("header")
    .map(el => mountHeader(el, { viewport$: javascripts_viewport$, header$: javascripts_header$, main$: javascripts_main$ })), 
/* Search */
...getComponentElements("search")
    .map(el => mountSearch(el, { keyboard$: javascripts_keyboard$ })), 
/* Repository information */
...getComponentElements("source")
    .map(el => mountSource(el)), 
/* Navigation tabs */
...getComponentElements("tabs")
    .map(el => mountTabs(el, { viewport$: javascripts_viewport$, header$: javascripts_header$ })));
/* Set up content component observables */
const content$ = Object(defer["a" /* defer */])(() => Object(merge["a" /* merge */])(
/* Content */
...getComponentElements("content")
    .map(el => mountContent(el, { target$: javascripts_target$, viewport$: javascripts_viewport$, print$: javascripts_print$ })), 
/* Header title */
...getComponentElements("header-title")
    .map(el => mountHeaderTitle(el, { viewport$: javascripts_viewport$, header$: javascripts_header$ })), 
/* Sidebar */
...getComponentElements("sidebar")
    .map(el => el.getAttribute("data-md-type") === "navigation"
    ? Object(browser["a" /* at */])(screen$, () => mountSidebar(el, { viewport$: javascripts_viewport$, header$: javascripts_header$, main$: javascripts_main$ }))
    : Object(browser["a" /* at */])(tablet$, () => mountSidebar(el, { viewport$: javascripts_viewport$, header$: javascripts_header$, main$: javascripts_main$ }))), 
/* Table of contents */
...getComponentElements("toc")
    .map(el => mountTableOfContents(el, { viewport$: javascripts_viewport$, header$: javascripts_header$ }))));
/* Set up component observables */
const component$ = javascripts_document$
    .pipe(Object(switchMap["a" /* switchMap */])(() => content$), Object(mergeWith["a" /* mergeWith */])(control$), Object(shareReplay["a" /* shareReplay */])(1));
/* Subscribe to all components */
component$.subscribe();
/* Export to window */



/***/ }),

/***/ 7:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return configuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return feature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return translation; });
/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * Data
 * ------------------------------------------------------------------------- */
/**
 * Retrieve global configuration and make base URL absolute
 */
const script = Object(_browser__WEBPACK_IMPORTED_MODULE_0__[/* getElementOrThrow */ "f"])("#__config");
const config = JSON.parse(script.textContent);
config.base = new URL(config.base, Object(_browser__WEBPACK_IMPORTED_MODULE_0__[/* getLocation */ "i"])())
    .toString()
    .replace(/\/$/, "");
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Retrieve global configuration
 *
 * @returns Global configuration
 */
function configuration() {
    return config;
}
/**
 * Check whether a feature flag is enabled
 *
 * @param flag - Feature flag
 *
 * @returns Test result
 */
function feature(flag) {
    return config.features.includes(flag);
}
/**
 * Retrieve the translation for the given key
 *
 * @param key - Key to be translated
 * @param value - Value to be replaced
 *
 * @returns Translation
 */
function translation(key, value) {
    return typeof value !== "undefined"
        ? config.translations[key].replace("#", value.toString())
        : config.translations[key];
}


/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ h; });
__webpack_require__.d(__webpack_exports__, "d", function() { return /* reexport */ truncate; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ round; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ hash; });

// CONCATENATED MODULE: ./src/assets/javascripts/utilities/h/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */
/**
 * Append a child node to an element
 *
 * @param el - Element
 * @param child - Child node(s)
 */
function appendChild(el, child) {
    /* Handle primitive types (including raw HTML) */
    if (typeof child === "string" || typeof child === "number") {
        el.innerHTML += child.toString();
        /* Handle nodes */
    }
    else if (child instanceof Node) {
        el.appendChild(child);
        /* Handle nested children */
    }
    else if (Array.isArray(child)) {
        for (const node of child)
            appendChild(el, node);
    }
}
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * JSX factory
 *
 * @param tag - HTML tag
 * @param attributes - HTML attributes
 * @param children - Child elements
 *
 * @returns Element
 */
function h(tag, attributes, ...children) {
    const el = document.createElement(tag);
    /* Set attributes, if any */
    if (attributes)
        for (const attr of Object.keys(attributes))
            if (typeof attributes[attr] !== "boolean")
                el.setAttribute(attr, attributes[attr]);
            else if (attributes[attr])
                el.setAttribute(attr, "");
    /* Append child nodes */
    for (const child of children)
        appendChild(el, child);
    /* Return element */
    return el;
}

// CONCATENATED MODULE: ./src/assets/javascripts/utilities/string/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
/* ----------------------------------------------------------------------------
 * Functions
 * ------------------------------------------------------------------------- */
/**
 * Truncate a string after the given number of characters
 *
 * This is not a very reasonable approach, since the summaries kind of suck.
 * It would be better to create something more intelligent, highlighting the
 * search occurrences and making a better summary out of it, but this note was
 * written three years ago, so who knows if we'll ever fix it.
 *
 * @param value - Value to be truncated
 * @param n - Number of characters
 *
 * @returns Truncated value
 */
function truncate(value, n) {
    let i = n;
    if (value.length > i) {
        while (value[i] !== " " && --i > 0) { /* keep eating */ }
        return `${value.substring(0, i)}...`;
    }
    return value;
}
/**
 * Round a number for display with repository facts
 *
 * This is a reverse-engineered version of GitHub's weird rounding algorithm
 * for stars, forks and all other numbers. While all numbers below `1,000` are
 * returned as-is, bigger numbers are converted to fixed numbers:
 *
 * - `1,049` => `1k`
 * - `1,050` => `1.1k`
 * - `1,949` => `1.9k`
 * - `1,950` => `2k`
 *
 * @param value - Original value
 *
 * @returns Rounded value
 */
function round(value) {
    if (value > 999) {
        const digits = +((value - 950) % 1000 > 99);
        return `${((value + 0.000001) / 1000).toFixed(digits)}k`;
    }
    else {
        return value.toString();
    }
}
/**
 * Simple hash function
 *
 * @see https://bit.ly/2wsVjJ4 - Original source
 *
 * @param value - Value to be hashed
 *
 * @returns Hash as 32bit integer
 */
function hash(value) {
    let h = 0;
    for (let i = 0, len = value.length; i < len; i++) {
        h = ((h << 5) - h) + value.charCodeAt(i);
        h |= 0; // Convert to 32bit integer
    }
    return h;
}

// CONCATENATED MODULE: ./src/assets/javascripts/utilities/index.ts
/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */




/***/ })

/******/ })));
//# sourceMappingURL=bundle.6ce710dc.min.js.map